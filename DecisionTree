{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95e909d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This filters any outputs from libraries that we don't want to see, and clear_output removes any outputs generated by a cell\n",
    "from IPython.display import clear_output\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c275bb55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-2.9.0.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Visualisation libraries\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import missingno as msno #For missing value visualization\n",
    "#from wordcloud import WordCloud\n",
    "\n",
    "# From here: https://www.tutorialspoint.com/plotly/plotly_plotting_inline_with_jupyter_notebook.htm\n",
    "import plotly.offline as py\n",
    "py.init_notebook_mode(connected=True)\n",
    "\n",
    "# library for loading\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "import time\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "15d4160f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# matching strings via regex expressions\n",
    "import re\n",
    "\n",
    "# string utility\n",
    "import string\n",
    "\n",
    "# main nlp library and modell\n",
    "import spacy\n",
    "spacy.cli.download(\"en_core_web_sm\")\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "clear_output()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9d39fed0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculation of Performance of Models\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import f1_score,precision_score,recall_score,accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aff73b73",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Regression model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Ensemble model\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "# Essentially, Random Forest is a group of decision trees\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Support Vector Classifier, based on SVMs (Support Vector Machines)\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# https://nlp.stanford.edu/IR-book/html/htmledition/naive-bayes-text-classification-1.html\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "\n",
    "from sklearn.tree import ExtraTreeClassifier\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "\n",
    "# Random classification, ignoring inputs\n",
    "from sklearn.dummy import DummyClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e4e29978",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'C:\\\\Users\\\\Arne Jandt\\\\anaconda3\\\\envs\\\\UebungenProjekt\\\\bmw_cardata_all.xlsx'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[1;32mIn [6]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# loading excel table\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m data \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_excel\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mC:\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mUsers\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mArne Jandt\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43manaconda3\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43menvs\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mUebungenProjekt\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43mbmw_cardata_all.xlsx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m      3\u001b[0m data\u001b[38;5;241m.\u001b[39mhead()\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\util\\_decorators.py:311\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    305\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[0;32m    306\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m    307\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39marguments),\n\u001b[0;32m    308\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[0;32m    309\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mstacklevel,\n\u001b[0;32m    310\u001b[0m     )\n\u001b[1;32m--> 311\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py:457\u001b[0m, in \u001b[0;36mread_excel\u001b[1;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, decimal, comment, skipfooter, convert_float, mangle_dupe_cols, storage_options)\u001b[0m\n\u001b[0;32m    455\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(io, ExcelFile):\n\u001b[0;32m    456\u001b[0m     should_close \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m--> 457\u001b[0m     io \u001b[38;5;241m=\u001b[39m \u001b[43mExcelFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mio\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mengine\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    458\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m engine \u001b[38;5;129;01mand\u001b[39;00m engine \u001b[38;5;241m!=\u001b[39m io\u001b[38;5;241m.\u001b[39mengine:\n\u001b[0;32m    459\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    460\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEngine should not be specified when passing \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    461\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124man ExcelFile - ExcelFile already has the engine set\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    462\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py:1376\u001b[0m, in \u001b[0;36mExcelFile.__init__\u001b[1;34m(self, path_or_buffer, engine, storage_options)\u001b[0m\n\u001b[0;32m   1374\u001b[0m     ext \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxls\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1375\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1376\u001b[0m     ext \u001b[38;5;241m=\u001b[39m \u001b[43minspect_excel_format\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1377\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcontent_or_path\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\n\u001b[0;32m   1378\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1379\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ext \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1380\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1381\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExcel file format cannot be determined, you must specify \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1382\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124man engine manually.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1383\u001b[0m         )\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py:1250\u001b[0m, in \u001b[0;36minspect_excel_format\u001b[1;34m(content_or_path, storage_options)\u001b[0m\n\u001b[0;32m   1247\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(content_or_path, \u001b[38;5;28mbytes\u001b[39m):\n\u001b[0;32m   1248\u001b[0m     content_or_path \u001b[38;5;241m=\u001b[39m BytesIO(content_or_path)\n\u001b[1;32m-> 1250\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1251\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcontent_or_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrb\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\n\u001b[0;32m   1252\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m handle:\n\u001b[0;32m   1253\u001b[0m     stream \u001b[38;5;241m=\u001b[39m handle\u001b[38;5;241m.\u001b[39mhandle\n\u001b[0;32m   1254\u001b[0m     stream\u001b[38;5;241m.\u001b[39mseek(\u001b[38;5;241m0\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\common.py:798\u001b[0m, in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    789\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(\n\u001b[0;32m    790\u001b[0m             handle,\n\u001b[0;32m    791\u001b[0m             ioargs\u001b[38;5;241m.\u001b[39mmode,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    794\u001b[0m             newline\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    795\u001b[0m         )\n\u001b[0;32m    796\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    797\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[1;32m--> 798\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    799\u001b[0m     handles\u001b[38;5;241m.\u001b[39mappend(handle)\n\u001b[0;32m    801\u001b[0m \u001b[38;5;66;03m# Convert BytesIO or file objects passed with an encoding\u001b[39;00m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Arne Jandt\\\\anaconda3\\\\envs\\\\UebungenProjekt\\\\bmw_cardata_all.xlsx'"
     ]
    }
   ],
   "source": [
    "# loading excel table\n",
    "data = pd.read_excel(r\"C:\\Users\\Arne Jandt\\anaconda3\\envs\\UebungenProjekt\\bmw_cardata_all.xlsx\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66b03ab8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# inspecting data\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4164491b",
   "metadata": {},
   "outputs": [],
   "source": [
    "cleaned_data = data.dropna()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9aa9fbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# inspecting data shape\n",
    "cleaned_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b33013c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# inspecting data\n",
    "data.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90b23ba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# searching for missing data\n",
    "msno.matrix(cleaned_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ad98887",
   "metadata": {},
   "outputs": [],
   "source": [
    "# inspecting column values\n",
    "#cleaned_data['car_gebraucht_oder_new'].unique()\n",
    "#cleaned_data['car_getriebe'].unique()\n",
    "cleaned_data['car_kraftstoff'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cd8992d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# drop column car_fahrzeughalter and car_verbrauch\n",
    "cleaned_data = data.drop(['car_fahrzeughalter','car_verbrauch'],axis=1)\n",
    "\n",
    "\n",
    "# cleaning column car_kilometerstand\n",
    "# initializing unit \n",
    "unit = \"km\"\n",
    "  \n",
    "# Remove Units from Value List\n",
    "# Using replace() + strip() + list comprehension\n",
    "cleaned_data[\"car_kilometerstand\"] = [sub.replace(unit, \"\").strip() for sub in cleaned_data[\"car_kilometerstand\"]]\n",
    "cleaned_data['car_kilometerstand'] = [sub.replace('.', \"\").strip() for sub in cleaned_data[\"car_kilometerstand\"]]\n",
    "cleaned_data['car_kilometerstand'] = pd.to_numeric(cleaned_data['car_kilometerstand'])\n",
    "\n",
    "# clean column car_co2_ausstross\n",
    "# initializing unit \n",
    "unit = \"g/km (komb.)\"\n",
    "  \n",
    "# Remove Units from Value List\n",
    "# Using replace() + strip() + list comprehension\n",
    "cleaned_data[\"car_co2_ausstoss\"] = [sub.replace(unit, \"\").strip() for sub in cleaned_data[\"car_co2_ausstoss\"]]\n",
    "cleaned_data[\"car_co2_ausstoss\"] = [sub.replace(\"- (g/km)\", \"0\").strip() for sub in cleaned_data[\"car_co2_ausstoss\"]]\n",
    "cleaned_data['car_co2_ausstoss'] = pd.to_numeric(cleaned_data['car_co2_ausstoss'])\n",
    "\n",
    "\n",
    "#cleaning column erstzulassung\n",
    "cleaned_data['car_erstzulassung'] = cleaned_data['car_erstzulassung'].replace('- (Erstzulassung)', np.nan)\n",
    "cleaned_data['car_erstzulassung'] = cleaned_data['car_erstzulassung'].fillna(0)\n",
    "# https://stackoverflow.com/questions/50863691/pandas-convert-date-object-to-int\n",
    "# cleaned_data['car_erstzulassung'] = cleaned_data['car_erstzulassung']\n",
    "# cleaning column 'car_erstzulassung'\n",
    "cleaned_data['car_erstzulassung'] = pd.to_datetime(cleaned_data['car_erstzulassung'])\n",
    "cleaned_data['car_erstzulassung'] = cleaned_data['car_erstzulassung'].dt.strftime('%Y%m%d').astype(int)\n",
    "\n",
    "# cleaning column car_leistung\n",
    "for i in range(len(cleaned_data)):\n",
    "    strt_pos = cleaned_data['car_leistung'].values[i].find('(')\n",
    "    stop_pos = cleaned_data['car_leistung'].values[i].find(')')\n",
    "    cleaned_data['car_leistung'].values[i] = f\"{cleaned_data['car_leistung'].values[i][:strt_pos:].strip()} {cleaned_data['car_leistung'].values[i][stop_pos+1:].strip()}\"\n",
    "cleaned_data['car_leistung'] = cleaned_data['car_leistung'].str.replace(r'\\D', '')\n",
    "cleaned_data['car_leistung'] = pd.to_numeric(cleaned_data['car_leistung'])\n",
    "\n",
    "\n",
    "# cleaning column 'car_kraftstoff'\n",
    "cleaned_data['car_kraftstoff'] = cleaned_data['car_kraftstoff'].replace({'Benzin': 1,'Diesel':2,'Elektro/Benzin': 3,'Elektro/Diesel':4,'Sonstige': 5,\n",
    "                                                                      '- (Kraftstoff)': 0, 'Automatik': 0})\n",
    "# cleaning column 'car_getriebe'\n",
    "cleaned_data['car_getriebe'] = cleaned_data['car_getriebe'].replace({'Automatik': 1, 'Schaltgetriebe': 2,'Halbautomatik': 3,  '- (Getriebe)': 0, '1 Fahrzeughalter': 0,})\n",
    "\n",
    "# cleaning column 'car_gebraucht_oder_new'\n",
    "cleaned_data['car_gebraucht_oder_new'] = cleaned_data['car_gebraucht_oder_new'].replace({'Gebraucht': 1, 'Neu': 2, 'Vorführfahrzeug': 3, 'Jahreswagen':4, 'Oldtimer': 5,'195 kW (265 PS)':0, '290 kW (394 PS)':0})\n",
    "\n",
    "\n",
    "# cleaning column 'Price'\n",
    "cleaned_data['Price'] = [sub.replace('€', \"\").strip() for sub in cleaned_data['Price']]\n",
    "cleaned_data['Price'] = [sub.replace(',-', \"\").strip() for sub in cleaned_data['Price']]\n",
    "cleaned_data['Price'] = [sub.replace('.', \"\").strip() for sub in cleaned_data['Price']]\n",
    "cleaned_data['Price'] = pd.to_numeric(cleaned_data['Price'])\n",
    "\n",
    "\n",
    "\n",
    "cleaned_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15fd9551",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "843cd28d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize(column):\n",
    "    \"\"\"Tokenizes a Pandas dataframe column and returns a list of tokens.\n",
    "\n",
    "    Args:\n",
    "        column: Pandas dataframe column (i.e. df['text']).\n",
    "\n",
    "    Returns:\n",
    "        tokens (list): Tokenized list, i.e. [Donald, Trump, tweets]\n",
    "    \"\"\"\n",
    "\n",
    "    tokens = nltk.wordpunct_tokenize(column)\n",
    "    return [w for w in tokens]    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b14f19eb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "cleaned_data['tokenized'] = cleaned_data.apply(lambda x: tokenize(str(x['Version'])), axis=1)\n",
    "cleaned_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "772e55b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# counting tokenized words\n",
    "# https://stackoverflow.com/questions/55672912/faster-way-to-count-total-occurrences-of-values-in-a-column-of-lists-in-pandas\n",
    "top_tokenized_words = pd.Series([x for item in cleaned_data['tokenized'] for x in item]).value_counts()\n",
    "print(top_tokenized_words.head(20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73e167c3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# searching for feature M, xDrive, Sport, d, Navi (optimized engine for sport purpose)\n",
    "#https://stackoverflow.com/questions/45750493/see-if-item-in-each-row-of-pandas-series\n",
    "cleaned_data = cleaned_data.assign(feature_M = cleaned_data['tokenized'].apply(set) & set(['M']),\n",
    "                   feature_xDrive = cleaned_data['tokenized'].apply(set) & set(['xDrive']),\n",
    "                    feature_Sport = cleaned_data['tokenized'].apply(set) & set(['Sport']),\n",
    "                    feature_d = cleaned_data['tokenized'].apply(set) & set(['d']),\n",
    "                    feature_Navi = cleaned_data['tokenized'].apply(set) & set(['Navi']))\n",
    "#cleaned_data.assign(feature_xDrive = cleaned_data['tokenized'].apply(set) & set(['xDrive']))\n",
    "#cleaned_data.assign(feature_Sport = cleaned_data['tokenized'].apply(set) & set(['Sport']))\n",
    "#cleaned_data.assign(feature_d = cleaned_data['tokenized'].apply(set) & set(['d']))\n",
    "#cleaned_data.assign(feature_Navi = cleaned_data['tokenized'].apply(set) & set(['Navi']))\n",
    "#cleaned_data.to_excel(\"output_data_4.xlsx\",index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13b49a35",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace True or False with 0 and 1\n",
    "cleaned_data['feature_M'] = cleaned_data['feature_M'].replace({False:0,True:1})\n",
    "cleaned_data['feature_xDrive'] = cleaned_data['feature_xDrive'].replace({False:0,True:1})\n",
    "cleaned_data['feature_Sport'] = cleaned_data['feature_Sport'].replace({False:0,True:1})\n",
    "cleaned_data['feature_d'] = cleaned_data['feature_d'].replace({False:0,True:1})\n",
    "cleaned_data['feature_Navi'] = cleaned_data['feature_Navi'].replace({False:0,True:1})\n",
    "cleaned_data.to_excel(\"output_data_7.xlsx\",index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8a0e5df",
   "metadata": {},
   "outputs": [],
   "source": [
    "cleaned_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c63ce675",
   "metadata": {},
   "outputs": [],
   "source": [
    "#w='M'\n",
    "#feature_M = [[any(w==term for w in lst) for term in terms] for lst in cleaned_data['tokenized']]\n",
    "print(top_tokenized_words.head(20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95048b4f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee200f8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#cleaned_data = cleaned_data.assign(counted_tokens=top_tokenized_words.values)\n",
    "#combined_data = pd.concat([cleaned_data,top_tokenized_words],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "cca309f7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Version</th>\n",
       "      <th>car_kilometerstand</th>\n",
       "      <th>car_erstzulassung</th>\n",
       "      <th>car_leistung</th>\n",
       "      <th>car_gebraucht_oder_new</th>\n",
       "      <th>car_getriebe</th>\n",
       "      <th>car_kraftstoff</th>\n",
       "      <th>car_co2_ausstoss</th>\n",
       "      <th>tokenized</th>\n",
       "      <th>feature_M</th>\n",
       "      <th>feature_xDrive</th>\n",
       "      <th>feature_Sport</th>\n",
       "      <th>feature_d</th>\n",
       "      <th>feature_Navi</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>xDrive 30e Advantage Steptronic</td>\n",
       "      <td>42092</td>\n",
       "      <td>20200901</td>\n",
       "      <td>215</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>49</td>\n",
       "      <td>['xDrive', '30e', 'Advantage', 'Steptronic']</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>43490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>xDrive30i Leder Pano Totwinkel HiFi Kamera Navi</td>\n",
       "      <td>0</td>\n",
       "      <td>19700101</td>\n",
       "      <td>180</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>175</td>\n",
       "      <td>['xDrive30i', 'Leder', 'Pano', 'Totwinkel', 'H...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>59510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>xDrive20d HUD DA+ Pano PA+ Sportsitze AHK</td>\n",
       "      <td>16100</td>\n",
       "      <td>20201101</td>\n",
       "      <td>140</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>126</td>\n",
       "      <td>['xDrive20d', 'HUD', 'DA', '+', 'Pano', 'PA', ...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>xDrive20i Advatage Aut. Navi PDC RFK AHK LED</td>\n",
       "      <td>56100</td>\n",
       "      <td>20191101</td>\n",
       "      <td>135</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>151</td>\n",
       "      <td>['xDrive20i', 'Advatage', 'Aut', '.', 'Navi', ...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>34630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>xDrive30d M Sport (Gestiksteuerung Head-Up)</td>\n",
       "      <td>58417</td>\n",
       "      <td>20190701</td>\n",
       "      <td>195</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>157</td>\n",
       "      <td>['xDrive30d', 'M', 'Sport', '(', 'Gestiksteuer...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>44290</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Version  car_kilometerstand  \\\n",
       "0                  xDrive 30e Advantage Steptronic               42092   \n",
       "1  xDrive30i Leder Pano Totwinkel HiFi Kamera Navi                   0   \n",
       "2        xDrive20d HUD DA+ Pano PA+ Sportsitze AHK               16100   \n",
       "3     xDrive20i Advatage Aut. Navi PDC RFK AHK LED               56100   \n",
       "4      xDrive30d M Sport (Gestiksteuerung Head-Up)               58417   \n",
       "\n",
       "   car_erstzulassung  car_leistung  car_gebraucht_oder_new  car_getriebe  \\\n",
       "0           20200901           215                       1             1   \n",
       "1           19700101           180                       2             1   \n",
       "2           20201101           140                       1             1   \n",
       "3           20191101           135                       1             1   \n",
       "4           20190701           195                       1             1   \n",
       "\n",
       "   car_kraftstoff  car_co2_ausstoss  \\\n",
       "0               3                49   \n",
       "1               1               175   \n",
       "2               2               126   \n",
       "3               1               151   \n",
       "4               2               157   \n",
       "\n",
       "                                           tokenized  feature_M  \\\n",
       "0       ['xDrive', '30e', 'Advantage', 'Steptronic']          0   \n",
       "1  ['xDrive30i', 'Leder', 'Pano', 'Totwinkel', 'H...          0   \n",
       "2  ['xDrive20d', 'HUD', 'DA', '+', 'Pano', 'PA', ...          0   \n",
       "3  ['xDrive20i', 'Advatage', 'Aut', '.', 'Navi', ...          0   \n",
       "4  ['xDrive30d', 'M', 'Sport', '(', 'Gestiksteuer...          1   \n",
       "\n",
       "   feature_xDrive  feature_Sport  feature_d  feature_Navi  Price  \n",
       "0               1              0          0             0  43490  \n",
       "1               0              0          0             1  59510  \n",
       "2               0              0          0             0  46490  \n",
       "3               0              0          0             1  34630  \n",
       "4               0              1          0             0  44290  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_excel(r\"C:\\Users\\Ammar Khidir\\Desktop\\output_data_7.xlsx\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4192d3f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "newdata = data.drop(['Version','tokenized'],axis='columns')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "910c033d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_kilometerstand</th>\n",
       "      <th>car_erstzulassung</th>\n",
       "      <th>car_leistung</th>\n",
       "      <th>car_gebraucht_oder_new</th>\n",
       "      <th>car_getriebe</th>\n",
       "      <th>car_kraftstoff</th>\n",
       "      <th>car_co2_ausstoss</th>\n",
       "      <th>feature_M</th>\n",
       "      <th>feature_xDrive</th>\n",
       "      <th>feature_Sport</th>\n",
       "      <th>feature_d</th>\n",
       "      <th>feature_Navi</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.104706</td>\n",
       "      <td>0.961044</td>\n",
       "      <td>0.281250</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.049049</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.132930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.208333</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.175175</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.182930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.040050</td>\n",
       "      <td>0.961428</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.126126</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.142294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.139552</td>\n",
       "      <td>0.942238</td>\n",
       "      <td>0.114583</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.151151</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.105277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.145316</td>\n",
       "      <td>0.941470</td>\n",
       "      <td>0.239583</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.157157</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.135427</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   car_kilometerstand  car_erstzulassung  car_leistung  \\\n",
       "0            0.104706           0.961044      0.281250   \n",
       "1            0.000000           0.000000      0.208333   \n",
       "2            0.040050           0.961428      0.125000   \n",
       "3            0.139552           0.942238      0.114583   \n",
       "4            0.145316           0.941470      0.239583   \n",
       "\n",
       "   car_gebraucht_oder_new  car_getriebe  car_kraftstoff  car_co2_ausstoss  \\\n",
       "0                       1             1               3          0.049049   \n",
       "1                       2             1               1          0.175175   \n",
       "2                       1             1               2          0.126126   \n",
       "3                       1             1               1          0.151151   \n",
       "4                       1             1               2          0.157157   \n",
       "\n",
       "   feature_M  feature_xDrive  feature_Sport  feature_d  feature_Navi     Price  \n",
       "0          0               1              0          0             0  0.132930  \n",
       "1          0               0              0          0             1  0.182930  \n",
       "2          0               0              0          0             0  0.142294  \n",
       "3          0               0              0          0             1  0.105277  \n",
       "4          1               0              1          0             0  0.135427  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newdata['car_kilometerstand'] = (newdata['car_kilometerstand'] - newdata['car_kilometerstand'].min()) / (newdata['car_kilometerstand'].max() - newdata['car_kilometerstand'].min())    \n",
    "newdata['car_erstzulassung'] = (newdata['car_erstzulassung'] - newdata['car_erstzulassung'].min()) / (newdata['car_erstzulassung'].max() - newdata['car_erstzulassung'].min())    \n",
    "newdata['car_leistung'] = (newdata['car_leistung'] - newdata['car_leistung'].min()) / (newdata['car_leistung'].max() - newdata['car_leistung'].min())    \n",
    "newdata['car_co2_ausstoss'] = (newdata['car_co2_ausstoss'] - newdata['car_co2_ausstoss'].min()) / (newdata['car_co2_ausstoss'].max() - newdata['car_co2_ausstoss'].min())    \n",
    "newdata['Price'] = (newdata['Price'] - newdata['Price'].min()) / (newdata['Price'].max() - newdata['Price'].min())    \n",
    "newdata.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "72589e61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.058742422420519816\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor, plot_tree\n",
    "from sklearn.metrics import mean_squared_error as MSE\n",
    "#Seperatingthe Target variable\n",
    "\n",
    "X = newdata.drop(['Price'], axis='columns')\n",
    "\n",
    "Y = newdata['Price']\n",
    "\n",
    "#SplitingDatasetintoTest and Train \n",
    "X_train, X_test, y_train, y_test= train_test_split( X,Y, test_size= 0.2, random_state= 3)\n",
    "#Function to perform training with Entropy \n",
    "#clf_entropy= DecisionTreeClassifier(criterion = \"entropy\", random_state= 100, max_depth=3, min_samples_leaf=5)\n",
    "#clf_entropy.fit(X_train, y_train)\n",
    "#Instantiate a DecisionTreeRegressor 'dt'\n",
    "dt = DecisionTreeRegressor(max_depth=4,\n",
    "                          min_samples_leaf=0.1,\n",
    "                          random_state=3)\n",
    "#Fit 'dt' to the trainning-set\n",
    "dt.fit(X_train, y_train)\n",
    "#Predict test-set lables\n",
    "y_pred = dt.predict(X_test)\n",
    "#Compute test-set MSE\n",
    "mse_dt = MSE(y_test, y_pred)\n",
    "#Compute test-set RMSE\n",
    "rmse_dt = mse_dt**(1/2)\n",
    "\n",
    "print(rmse_dt)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "1715ff29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Oeew//77c//993P11Vcv9TU+/vhjbr/9dv75z3/yk5/8hL59+3L++edTr149AB588EHOOeecJT73b3/7G127dl1k3+TJk2ncuHFxu0mTJkyePHmp5+/evTvjx4+nZcuWPPzww8X9//73v+nduzcTJkzgN7/5DXvssccyfxeSpLXHWwSSJEnSSnr55Zdp164dJSUlANSuXZt69eqRUuKCCy6gtLSU0tJSXn31VcaNG1d8Xo8ePZa7OAXwyCOPcPbZZ1NaWkqnTp2YPn0677777iLHtGnThpEjR3LyySfz6KOPUr9+/ZV6T7/4xS+oV68e66yzDqWlpXz44YfMnDmTDz74gP333x+A/ffff6n577vvPrbccks+/vhjnnzySUaMGMHhhx9eLE4B7LvvvsWhdt//+X5xCiClREQssu/72981cuRIpkyZQocOHbjmmmuK+7feemveeOMNPv30U9566y2ee+65FfjNSJLWJAtUkiRJ0kpaOPzt+26//XbeeOMNXnrpJcaNG8ehhx7KnDlzio/XrVt3hc+zcG6lsWPH8tFHH9GnT59Fjtl6660ZM2YMXbp04ZZbbmGvvfZa4mvVqlWL8vLy4vZ3c0FWZFuoZs2azJ8/f4kFoqXZbbfduO6663jnnXfo2bMnl112Gf/73/8WOebBBx8sFu++//P8888v9ppNmjRh0qRJxe1JkybRqFGjZeaoWbMmAwYMWOJcVRtttBE9evTg7rvvXq73JEla8yxQSZIkSSupS5cuvP7668XuqLlz51JWVsaMGTNo0KABderU4fPPP+eee+5ZpfP06NGDSy65pFgQ++CDD4qr0y30ySefsM4669CnTx8uu+wyXn31VSCbk+m7k5NvtdVWjBs3jvnz51NWVsYjjzzyg+ffcMMN2WqrrXjwwQeBrMA0ffr0JR67wQYb8Ktf/YrnnnuOoUOH8vXXX7Pbbruxxx578N577wEr3kG111578eKLLzJp0iRSSlx//fUceOCBix33xRdfMHXqVCAr6t1zzz20atUKgI8++qg479Ts2bN5+OGHi49JkvJngUqSJElaSZtssgl33nknRx99NG3atKFLly785z//oV+/fvzvf/+jpKSE/v37071791U6z+WXX87UqVMpKSmhVatWHH300cydO3eRY8aPH0/nzp0pLS1lr732Ks4Rtf/++/Pcc88VJ0nv0qULO+64I61ateLggw+mbdu2y5Vh8ODB/OlPf6JDhw688MILbL755my44YbLfE6zZs344x//yJtvvsl5551HrVorNwXuBhtswBVXXMFuu+1G8+bNadCgAYcffjiQFcuOPvpoAKZMmcLuu+9OSUkJJSUlvPfee1x55ZXAt8Mx27RpQ4cOHWjXrh0DBw4svkajRo0YOnQop512Go0aNeLzzz9fqaySpJUTS2tLliRJkgQRURcoAygrK1vh4XlVRVlZWXEeqWeffZaBAwcWO6Kqg1mzZn13Hq16KaVZyzpekrRiXMVPkiRJ0g8aOXIkZ511Fikl1ltvvSXO7SRJ0sqyg0qSJElahjXZQfXZZ5+xxx57LLb/zDPP5OCDD15t59Gqs4NKktYsC1SSJEnSMjjET2CBSpLWNCdJlyRJkiRJUq4sUEmSJElV1KBBgxg0aFDeMVaLF154gVatWrHNNtvQu3dvysrKlnjcO++8Q4cOHdh2223ZZZdd+O9//1t8bNiwYbRo0YLmzZszcOBAFixYAMC5555LaWlp8adWrVo88MADa+V9SZIyFqgkSZKkSmRhUWVtmj9//irlWNXM5eXlDBgwgCFDhjBhwgSaNm3KxRdfvMRjjznmGM466yzef/999ttvP8444wwAZs6cyfHHH88TTzzBhAkT+OKLL4oTvZ9zzjmMHTuWsWPHMnToUOrXr8+ee+65SpklSSvGApUkSZK0Er7++mt69epFSUkJrVu35vTTTwdg+vTp7LfffrRu3Zr999+fHj16MHjwYAC6devGk08+WXyNZs2a8cEHHwBw8skn06FDB9q0aUPPnj354osvAHjmmWfo2LEjAwcOpEOHDowbN47nn3+erl27ssMOO9C1a1fefPNNAObNm8eRRx7J9ttvz5577ll87WUZNmwYnTp1ol27duy5555MnjwZyLqvBgwYQI8ePdhxxx2ZOHEiDRs25IwzzqBLly488sgjvPTSS3Ts2JGSkhK6d+/O+++/v9TMq2L06NE0aNCAdu3aAfDrX/+aoUOHLnbclClTePfdd9l3330BOOqooxg2bBgAw4cPp0uXLjRp0oSIYODAgUt8jSFDhnDQQQex3nrrrVJmSdKKqZV3AEmSJKkyGj58OA0aNCgWQKZNmwZkw8WaNGnCAw88wMSJEykpKeHAAw/8wdf74x//yKabbgrAJZdcwvnnn8+ll14KwJgxY7jhhhto06YNX375JXvttRePP/44G2+8MS+//DJHHHEEo0aN4tprr+XLL7/krbfeYvr06bRr147mzZsv9ZwTJkzgyiuvZOTIkay//vrccccdnHLKKcXCzYsvvsioUaPYaKONmDhxIp9++ildu3blwgsvZO7cuWy99dYMHTqUzp07c9ddd9G3b1/+9a9/LZb5+0aPHs3RRx+9xExLWsFw8uTJNG7cuLjdpEmTYiHtuz755BMaNWpERABQr1491ltvPaZOnbpcr5FS4rbbbuP2229f6u9MkrRmWKCSJEmSVkKbNm34/e9/z8knn8zuu+/OHnvsAcDIkSO58cYbgaxDatddd12u13vkkUe4+uqr+frrr5k9ezbNmjUrPtaqVatioefll19mwoQJdO/evfj4F198QUqJkSNH0q9fP2rUqEGDBg3o1avXMs85YsQI3n77bTp37gxkQ/Hq1KlTfLxHjx5stNFGxe2NNtqIffbZB4D33nuPjTfeuPjcgw8+mGOOOYaZM2culvn72rdvz9ixY5fr9wJZ4Whh0QkgIhbZXtpx3z1+SY99f/u5556jVq1adOnSZbmzSZJWDwtUkiRJ0krYeuutGTNmDCNGjOCWW27h0ksvLQ7f+27hI6VU/HOtWrUoLy8vbs+ZMweAiRMncsYZZ/Daa6/xk5/8hAcffJCLLrqoeFzdunUXeb0dd9yR4cOHLzHX0s69JCklevXqxbXXXrvEx7973iXlWNLrLTz/95/7XSvaQdWkSRMmTZpU3P74449p1KjRYs9t3LgxkydPLuYoKytjzpw5NGjQgCZNmhS7uwAmTZq02GsMGTKE/v37LzW3JGnNcQ4qSZIkaSV88sknrLPOOvTp04fLLruMV199FYDu3btzyy23AFkRZOTIkcXnbLXVVrz22mtANk/TlClTAPjqq6+oXbs2m266KfPnz+eGG25Y6nk7d+7MG2+8wejRo4FsAvHXX3+9eO7bbruN8vJypk2b9oMr0e2+++489NBDfPTRRwB88803yz1f1Hbbbcf06dOL73vo0KFsu+221K9f/wefu7CDakk/3y9OLTx+6tSpxfd53XXXLXHY5Oabb06LFi148MEHAfjHP/7B/vvvD8Bee+3Fiy++yKRJk0gpcf311y/yGrNnz+a+++6jX79+y/X+JUmrlx1UkiRJ0koYP348Z5xxBhFBeXk5V199NZCtCNe/f39at27Ndtttxy677FJ8zmmnnUafPn24//77ixN2A7Ru3Zp99tmHn/70pzRq1IjOnTvz/PPPL/G8m2yyCffeey8nnngiZWVlzJs3j169etGuXTt+/etfM2bMGFq2bMmWW275g8MLW7RowbXXXkufPn2YN28eCxYs4JhjjqGkpOQH33/t2rW56667OP7444tdSrfddtvy/vpWSI0aNbj55pvp168f8+bNo2XLltx6661A1o11zjnn8OijjwJwzTXX0L9/f0499VQaNmxYnE9qgw024IorrmC33XZjwYIFdO/encMPP7x4jvvvv5/S0lKaNm26Rt6DJGnZ4ofafiVJkqTqLCLqAmUAZWVlyxy6tiQDBgygW7duDBgwYA2k09oya9Ys6tWrt3CzXkppVp55JKmqcYifJEmSJEmScmUHlSRJkrQMq9pBVRGce+653HfffYvs23jjjReZH0vLZgeVJK1ZFqgkSZKkZagKBaolGTBgADvttNNSV9Nbk9q3b8/8+fMBmDlzJtOmTWPatGkA9OzZk1deeYXatWvzySefFJ+TUuKUU05hxIgRQDZv10033USdOnW4+eabueyyy6hRIxsgctZZZy1xEvVVYYFKktYsh/hJkiRJWqtGjx5dXLXvl7/8JYccckjxsRNPPLFYhPquJ554gldeeYVx48bx5ptvsmDBAm6++WYADjjgAN544w3Gjh3L8OHDOfrooykrK1tr70eStOosUEmSJEk5+vrrr+nVqxclJSW0bt2a008/HYARI0bQqVMn2rZtS9u2bRk+fHjxOc2aNePMM8/k5z//OVtttRXPPPMMJ554IiUlJXTu3JnPP/8cgEGDBvHLX/6SPfbYg+23356jjjqKefPmLZZh2rRp9O3bl44dO1JSUsJVV121zGyrS0qJ2267bZHV9HbbbTc23njjxY6tUaMGc+fOZe7cucyfP5+vv/6ahg0bAtkKfREBUCxMlZeXr9askqQ1q1beASRJkqTqbPjw4TRo0IBhw4YBFIe6dejQgZdeeokaNWowefJkunTpwscff1wcxlanTh2effZZ7rnnHnr06MFjjz3GFVdcwTHHHMMNN9zAH/7wBwBeeuklxowZw0YbbUTv3r25/vrrOe644xbJcPLJJ3PQQQex7777MmfOHDp37szOO+/MhAkTlpjt+0pLS5e4f/fdd+fiiy9e6nt/5plnqF27Np07d/7B39Ouu+5Kt27d+PGPf0zNmjXZZ5992H///YuP33XXXfzpT3/i448/5uabb2aDDTb4wdeUJFUcdlBJkiRJOWrTpg0jR47k5JNP5tFHH6V+/foATJkyhf33359WrVrRs2dPpkyZwqefflp8Xu/evQFo27Yt9evXp2vXrsXtDz/8sHjcvvvuS4MGDahRowZHHHEETz/99GIZHnnkEc4++2xKS0vp1KkT06dP5913311qtu9bOFzv+z/LKk4BDBkyhP79+y/X7+m1115j4sSJ/Pe//+U///kP//vf/xgyZEjx8YMPPpi3336bMWPGcNFFFzF16tTlel1JUsVgB5UkSZKUo6233poxY8YwYsQIbrnlFi699FKefPJJjj32WA477DCOOuooABo0aMCcOXOKz6tduzYANWvWLP554fbCCciB4tA3yIbUfXf7u/sff/xxtthii8UeW1K271uZDqqvv/6aYcOGMW7cuCU+/n2DBw+me/fu1KlTB4BevXrxwgsvLDI8EGDbbbelWbNmjBw5crVPlC5JWnPsoJIkSZJy9Mknn7DOOuvQp08fLrvsMl599VUAZsyYQaNGjQC48847lzq87oc89NBDTJs2jfLycoYMGUL37t0XO6ZHjx5ccsklLFzh+4MPPmDGjBlLzfZ9K9NBNWzYMHbYYQeaNGmyXO+jadOmPPXUUyxYsIAFCxbw5JNP0rJlSwDefffd4nH/+c9/ePXVV/npT3+6XK8rSaoY7KCSJEmScjR+/HjOOOMMIoLy8nKuvvpqAM477zx++9vfstlmm9GpU6flLuR8X7du3Tj00EOZOHEinTt3ZuDAgYsdc/nll3PyySdTUlJCSolNN92Uu+++e6nZVochQ4Ys1v20MO97773H559/TqNGjejXrx8XXHABv/3tbxk7diytWrWiRo0a7LjjjvzmN78B4IYbbuCxxx5j3XXXpUaNGvzlL3+xQCVJlUwsvEsiSZIkaXERURcog2yFuLp16+acaPkNGjSI+fPn8+c//znvKJXerFmzqFev3sLNeimlWXnmkaSqxiF+kiRJkiRJypUdVJIkSdIyVOYOKq0+dlBJ0pplB5UkSZIkSZJyZYFKkiRJqgImTpxYXPUvLy+88AKtWrVim222oXfv3pSVlS3xuF//+tc0bNiQiGD+/PnF/dOmTWO33XZjww03ZKeddlrkOYMHD6ZBgwaUlpZSWlrKCSecsEbfiyRp7bJAJUmSJGmVlZeXM2DAAIYMGcKECRNo2rQpF1988RKPPeyww3j99dcX21+7dm3OOussbr/99iU+b++992bs2LGMHTuWK6+8crXmlyTlywKVJEmSVMGcc845nHPOOcXtV199lfbt2wNw0UUX0aFDB9q2bUu3bt3497//vdjzn3nmmUU6kAYPHkzfvn0BSCkxaNAgOnbsSGlpKQMHDuSbb75Z5cyjR4+mQYMGtGvXDsi6pIYOHbrEY3feeWc233zzxfbXqVOHbt26fXeuJ0lSNWGBSpIkSapgDj/8cG6//XYWLmh022230a9fPwCOPPJIRo0axZgxYzjuuOM49dRTV+i1b7nlFr766iteffVVxo4dS40aNbj++usXO2706NHF4XTf/7nrrrsWO37y5Mk0bty4uN2kSRMmT568Qtl+yBNPPEGbNm3YbbfdePXVV1fra0uS8lUr7wCSJEmSFtW8eXM222wzXnzxRTp16sR9993HmDFjgKyb6oILLmDGjBksWLCAefPmrdBrP/LII7z++us89dRTAMyePZv1119/sePat2/P2LFjl/t1U0pERHE7IhbZXlU9e/bkkEMOYb311uPpp59m//33591332XDDTdcbeeQJOXHApUkSZJUAfXr149bb72VGTNm0LZtWzbbbDPmzp3LoYceyiuvvML222/PuHHj2HvvvRd7bq1atSgvLy9uz5kzp/jnlBLnnXcehxxyyDLPP3r0aI4++uglPnbmmWdy8MEHL7KvSZMmTJo0qbj98ccfr9ZJ2zfZZJPin3fZZRcaNmzIu+++y4477rjaziFJyo8FKkmSJKkCOuSQQzj33HP5/PPPi8P75syZw4IFC9hiiy0AuOaaa5b43C233JIJEyZQVlZG7dq1ue+++9hss80A6NGjB1dffTU9e/akbt26TJs2jWnTprHVVlst8hor2kHVvn17pk6dyuuvv067du247rrrOPDAA1finS/Zp59+yk9+8hMAxo8fz8cff0zz5s1X2+tLkvLlHFSSJElSBdSgQQM6d+7MU089xb777gvAhhtuyB//+EfatWvHz3/+82Kh6vsaNmzIscceS2lpKXvvvTfbbLNN8bEBAwaw11570alTJ0pKSth1111X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obS0lJKSEj788ENOOOEEANq3b0/79u359NNPKS0tLf5ssMEGXHHFFTzzzDPstNNOxdde2h3hsWPHstNOO9GuXTtat27NkCFDio+dc845tGzZkpKSErp37w7Au+++S+fOnWnbti0tW7bk3nvvBaBZs2aL3BmNiOIXiIjg/PPPZ4cddmC77bbjpZdeKh532mmnse2227LLLrtwzDHHMGDAgB/8dzNjxgz+8Y9/8POf/5wjjjjiB49fmqFDh/KrX/0KgHbt2rHpppsyevToxY4bP348u+++OwAdO3bks88+47XXXqNGjRr07NmTiCg+Nnny5OLzdtttNzbeeOOVzidJFZXXSK+RCy3tGglZp/Fvf/tb/va3vxWvlQt5jaykUkr++OOPP/74488a+AHqAglIZWVlaaEvvvgibbHFFumNN95IKaU0Z86c9NVXX6UFCxakL7/8MqWU0oIFC9K+++6bHnjggZRSSv/3f/+XmjdvnqZNm5aWpX///sXnzJ49O5WWlqZx48allAVKf//734vHtm7dOk2aNKl47Ndff1087ptvvlnstZ955pm03Xbbpc8//zyNHDky/exnPys+dvPNN6fDDjtssT/PnDkzzZ07N6WU0vTp09NWW22VPv/88zR16tS0zTbbpAULFqSUUvF9H3/88WnIkCEppZTKy8vT9OnTU0opNW3aNE2YMKF4vu9mBNLNN9+cUkrpn//8Z+revXtKKaUHHnggdezYMc2ePTvNnj077bjjjql///5L/L1988036eGHH04HHXRQ2nrrrdPvfve7NGbMmEWO+cUvfpHatGmz2M+hhx66xNesV69emjlzZnG7T58+6Z577lnsuJ/97GfpxhtvTCml9Pjjjycg3XvvvYscU15ennbfffd03XXXLbL/o48+Sg0bNlzi+cvKytLC//6AuqkC/D/hjz/++JPS0q+PKXmN9Bq5qGVdI//617+m8847b4m/g5S8RlbGn1prrxQmSZIAXn75Zdq1a0dJSQkAtWvXpnbt2ixYsIALLriAESNGUF5ezmeffUaHDh3Yd999AejRowcbbbTRMl/7kUceYcyYMZxzzjlAdqfz3XffpXXr1gCL3MHt1q0bhx9+OL169WLfffelWbNmS33dDz74gCOPPJKHH36YTTfddLnfa1lZGQMHDuTNN9+kZs2aTJkypXgHuH79+vTv358999yTnj17ArDTTjsxaNAgPvzwQ/bee286dOiwXOfp06cPkN1dPfPMMwEYOXIkBx98MOuttx4Av/zlLxkzZswSn7/DDjvw5Zdfcu2113LHHXdQo8biTeaPPvrocr/vhb5/R/f725DdWT/ppJP4+9//TseOHWnZsiW1ai36Ee20006jTp06xbvNklRVeY30GvldS7tGfvjhh9x99908//zzK3xeVVwWqCRJWstSSkvcf/vtt/PGG2/w0ksvUadOHU455RTmzJlTfLxu3brL9dqPP/44W2yxxRIf/+5rXHnllYwZM4YnnniCbt26cdNNN7HLLrss9pxp06ax//77c+2117L99tsDUKtWrUXmivhuzu/64x//yLbbbsvtt99OjRo1aNeuHXPmzKFmzZq88sorPPfcczz++OP84Q9/4PXXX+eggw6iU6dOPP744xx33HH06NGDs88+e5HzLelctWvXBqBmzZorNf/IjTfeyC233MKJJ57Ivffey2GHHUb37t0X+RC+99578+mnny723JYtW3L77bcvtr9x48ZMmjSJn/70pwBMmjRpiZO1Nm/enIcffhiAefPmscUWW7DddtsVH7/wwgsZNWoUw4cPX+KHd0mqSrxGeo38rqVdI1955RUmTpzINttsA8Ann3xCt27duP/++2nfvv0Kv0dVDM5BJUnSWtalSxdef/11xo0bB8DcuXMpKytjxowZNGjQgDp16vD5559zzz33rPBr9+jRg0suuaT4Af+DDz5gxowZSzz2/fffp23btpx22mnssccexTun9evXZ+bMmQB88803HHjggfz2t78tzgEBsOWWWzJhwgTKysr45ptvuO+++5Z4jhkzZvCTn/yEGjVq8NJLL/HGG28A8NVXXzF16lR23XVXLrzwQurWrcvHH3/MBx98QOPGjfnVr37FiSeeyL/+9S8Attpqq+KcE3feeedy/S66devG0KFDmTt3LnPnzuWuu+5a6rEdOnTg73//O++88w69evXiuuuuY9ttt+WCCy4oHvPoo48yduzYxX6W9MEb4MADD+SGG24A4PXXX+fzzz9f4ofmzz77rPjniy++mE6dOrHtttsCcNVVV3Hvvffy0EMPFe9yS1JV5jXSa+R3Le0aeeihh/K///2PiRMnMnHiRBo1asQzzzxjcaqSs4NKkqS1bJNNNuHOO+/k6KOPZu7cudSqVYt//vOf9OvXj/vuu4+SkhIaNWpUnBR1RVx++eWcfPLJlJSUkFJi00035e67717isaeddhoffPABNWvWpHHjxlx44YUAnHTSSXTp0oV69erx17/+leeee46pU6dy3XXXAXDqqady2GGHceyxx1JaWsqWW27Jtttuu8QP+X/4wx/o168fN910E9tvvz0dO3YEsg/lBxxwALNnz6a8vJy9996bdu3accEFF3D77bez7rrrsu6663L11VcD8P/+3/9jwIAB/P3vf2efffZZrt/Fvvvuy3PPPUfr1q1p1KgRbdu2XWzo3Pets8469OzZk549ezJjxoxFJpNdUaeeeir9+vVjm222Yd1112Xw4MHFu81777035557Lu3bt2fYsGH89a9/pby8nJKSEgYPHgxkX1COP/54ttxyS7p27Qoseie6W7duvPfee3z++ec0atSIfv36LfJlQZIqI6+RXiOX5xr5Q7xGVk6xtBZKSZK0aiKiLlAG2TwTyzP8QKvXV199Rf369Zk3bx777bcf/fr149BDD8071loxa9Ys6tWrt3CzXkppVp55JGkhr48Vg9dIr5EVjR1UkiSpyjr44IP59NNPi8uTH3LIIXlHkiSpQvAaqYrGDipJktaQNXWH+LPPPmOPPfZYbP+ZZ57JwQcfvFrOocrPu8OSKqo12UHlNVLLw2tkxWSBSpKkNcQhDMqTH74lVVReH5U3r5EVk6v4SZIkSZIkKVcWqCRJ0mo1aNAgBg0alHeM1eKFF16gVatWbLPNNvTu3ZuysrIlHvfOO+/QoUMHtt12W3bZZRf++9//Fh8bNmwYLVq0oHnz5gwcOJAFCxYAMHz4cNq0aUNpaSmtW7fmqquuWivvSZJUMXi9/PZ6OW3aNHbbbTc23HBDdtppp7UZXRWIBSpJkvSDFhZV1qb58+evUo5VzVxeXs6AAQMYMmQIEyZMoGnTplx88cVLPPaYY47hrLPO4v3332e//fbjjDPOAGDmzJkcf/zxPPHEE0yYMIEvvviCIUOGALDTTjvx+uuvM3bsWF5++WUuuugi3nvvvVXKLEnKl9fLlbte1q5dm7POOovbb799lbKocrNAJUlSJfL111/Tq1cvSkpKaN26NaeffjoA06dPZ7/99qN169bsv//+9OjRg8GDBwPQrVs3nnzyyeJrNGvWjA8++ACAk08+mQ4dOtCmTRt69uzJF198AcAzzzxDx44dGThwIB06dGDcuHE8//zzdO3alR122IGuXbvy5ptvAjBv3jyOPPJItt9+e/bcc8/iay/LsGHD6NSpE+3atWPPPfdk8uTJQHY3ecCAAfTo0YMdd9yRiRMn0rBhQ8444wy6dOnCI488wksvvUTHjh0pKSmhe/fuvP/++0vNvCpGjx5NgwYNaNeuHQC//vWvGTp06GLHTZkyhXfffZd9990XgKOOOophw4YBWZdUly5daNKkCRHBwIEDi69Rr149atasCcDs2bOX+AVDkrRyvF5WrutlnTp16Nat23fnhVI1VCvvAJIkafkNHz6cBg0aFD/QTZs2DYBzzz2XJk2a8MADDzBx4kRKSko48MADf/D1/vjHP7LpppsCcMkll3D++edz6aWXAjBmzBhuuOEG2rRpw5dffslee+3F448/zsYbb8zLL7/MEUccwahRo7j22mv58ssveeutt5g+fTrt2rWjefPmSz3nhAkTuPLKKxk5ciTrr78+d9xxB6ecckrxw+yLL77IqFGj2GijjZg4cSKffvopXbt25cILL2Tu3LlsvfXWDB06lM6dO3PXXXfRt29f/vWvfy2W+ftGjx7N0UcfvcRMS1rdafLkyTRu3Li43aRJk+IXg+/65JNPaNSoEREBZIWn9dZbj6lTp/7gazz//PMce+yxfPDBB1xwwQW0aNFiqb83SdLy83pZua6Xm2yyyVJ/D6o+LFBJklSJtGnTht///vecfPLJ7L777sWltEeOHMmNN94IZHd8d9111+V6vUceeYSrr76ar7/+mtmzZ9OsWbPiY61atSp+cH355ZeZMGEC3bt3Lz7+xRdfkFJi5MiR9OvXjxo1atCgQQN69eq1zHOOGDGCt99+m86dOwPZ0II6deoUH+/RowcbbbRRcXujjTZin332AeC9995j4403Lj734IMP5phjjmHmzJmLZf6+9u3bM3bs2OX6vQCklIofogEiYpHtpR333eOX9Nh3t7t27cr48eP573//ywEHHMAvfvELi1SStBp4vaxc10sJLFBJklSpbL311owZM4YRI0Zwyy23cOmllxaHI3z3A15KqfjnWrVqUV5eXtyeM2cOABMnTuSMM87gtdde4yc/+QkPPvggF110UfG47y77nVJixx13ZPjw4UvMtbRzL0lKiV69enHttdcu8fHvLzf+/RxLer2F51/WUuUreke4SZMmTJo0qbj98ccf06hRo8We27hxYyZPnlzMUVZWxpw5c2jQoAFNmjQp3q0GmDRp0hJf48c//jFdunThoYceskAlSauB18vKdb2UwDmoJEmqVD755BPWWWcd+vTpw2WXXcarr74KQPfu3bnllluArAgycuTI4nO22morXnvtNSCbd2LKlCkAfPXVV9SuXZtNN92U+fPnc8MNNyz1vJ07d+aNN95g9OjRQDYh6uuvv14892233UZ5eTnTpk3jgQceWOZ72H333XnooYf46KOPAPjmm2+We/6L7bbbjunTpxff99ChQ9l2222pX7/+Dz534R3hJf18/8P2wuOnTp1afJ/XXXfdEoeBbL755rRo0YIHH3wQgH/84x/sv//+AOy11168+OKLTJo0iZQS119/ffE1JkyYUPwiNH36dJ544glatWq1XL8HSdKyeb2sXNdLCeygkiSpUhk/fjxnnHEGEUF5eTlXX301AOeccw79+/endevWbLfdduyyyy7F55x22mn06dOH+++/vzhhN0Dr1q3ZZ599+OlPf0qjRo3o3Lkzzz///BLPu8kmm3Dvvfdy4oknUlZWxrx58+jVqxft2rXj17/+NWPGjKFly5ZsueWWPzhcokWLFlx77bX06dOHefPmsWDBAo455hhKSkp+8P3Xrl2bu+66i+OPP7541/W2225b3l/fCqlRowY333wz/fr1Y968ebRs2ZJbb70VyO4un3POOTz66KMAXHPNNfTv359TTz2Vhg0bFlch2mCDDbjiiivYbbfdWLBgAd27d+fwww8H4MEHH+Smm26iVq1apJQ48sgj2WuvvdbIe5Gk6sbrZeW6XgI0b96cGTNmMHPmTBo1asQf/vAHjj322DWSWRVT/FBboSRJWjkRURcoAygrK1tmO/3qNmDAALp168aAAQPW2jlVscyaNeu7qyHVSynNyjOPJC2U5/Xx+7xeVk9eIysmh/hJkiRJkiQpV3ZQSZK0hlSkO8R5OPfcc7nvvvsW2bfxxhsvMt+H1hzvDkuqqKr79fH7vF6ufV4jKyYLVJIkrSF+AFee/PAtqaLy+qi8eY2smBziJ0mS1ooBAwZw44035nLubt260bx5c0pLSyktLS0uNV5eXk7nzp0pLS2ldevW9OnThxkzZgAwduxY2rZtS2lpKS1btuTss88uvt4777xDt27dKCkpoV27dowaNSqX9yVJqhryvEYOGjSIrbbaiojggw8+WOSxIUOG0Lp1a0pLS9lpp5147733Fnn8yy+/ZIsttqBv376Lve7zzz9PzZo1c3tfqnwsUEmSpGrh2muvLS6TvdtuuwHZykOPP/44Y8eOZfz48TRu3Ji//OUvQLZ60quvvlp8zogRIxgxYgQARxxxBCeccALjxo3j2muvpV+/ftiVLkmqjPbaay+eeeYZmjZtusj+r7/+mhNOOIGnn36asWPHcsghh3DWWWctcsxJJ53EHnvssdhrzpkzh9NPP93VabVCLFBJklTNfP311/Tq1YuSkhJat27N6aefDsCIESPo1KkTbdu2pW3btgwfPrz4nGbNmnHmmWfy85//nK222opnnnmGE088kZKSEjp37sznn38OZHdhf/nLX7LHHnuw/fbbc9RRRzFv3rzFMkybNo2+ffvSsWNHSkpKuOqqq5aZbU3aYIMNgKybatasbzv8119/fdZdd10A5s6du8j7GD9+PLvvvjsAHTt25LPPPuO1115b41klSWtWdbxGdurUiSZNmiy2v7y8nIigrKwMgBkzZtCwYcPi448++ijrrLMOu+yyy2LPPfvss/nNb37Dj370o9WSUdVDrbwDSJKktWv48OE0aNCAYcOGAdkHYYAOHTrw0ksvUaNGDSZPnkyXLl34+OOPqVEju59Vp04dnn32We655x569OjBY489xhVXXMExxxzDDTfcwB/+8AcAXnrpJcaMGcNGG21E7969uf766znuuOMWyXDyySdz0EEHse+++zJnzhw6d+7MzjvvzIQJE5aY7ftKS0uXuH/33Xfn4osvXuJjJ554IjVq1GCnnXbiL3/5S7EwBdC9e3fGjx9Py5Ytefjhh4v7//3vf9O7d28mTJjAb37zm+Jd4rZt23L33Xdz1FFHMWLECKZNm8akSZNo3779Mn/3kqSKrbpeI5ekXr16XHvttbRp04b69euz8cYb89JLLwEwc+ZMzjnnHJ544gkeeOCBRZ43atQo3nzzTS6++GKeeuqp5T6fZAeVJEnVTJs2bRg5ciQnn3wyjz76KPXr1wdgypQp7L///rRq1YqePXsyZcoUPv300+LzevfuDWTFmfr169O1a9fi9ocfflg8bt9996VBgwbUqFGDI444gqeffnqxDI888ghnn302paWldOrUienTp/Puu+8uNdv3LRx29/2fpX3wvu2223jrrbd47bXXqFGjBieffPIij48cOZIpU6bQoUMHrrnmmuL+rbfemjfeeINPP/2Ut956i+eeew6AwYMHM2zYMNq2bcu9995Ly5YtqVXL+36SVNlVx2vk0sycOZNrrrmGN998k//85z/st99+nHTSSQCceuqpnHrqqWy88caLPOebb77huOOOK3Z9SSvCT1KSJFUzW2+9NWPGjGHEiBHccsstXHrppTz55JMce+yxHHbYYRx11FEANGjQgDlz5hSfV7t2bQBq1qxZ/PPC7fnz5xe3I6L455TSItvf3f/444+zxRZbLPbYkrJ934reHW7UqBEA6667Lr/5zW/o06fPYsfUrFmTAQMGcMghh3Daaact8thGG21Ejx49uPvuu9l5551p3rx5sdNq3rx5bLHFFmy33XZLzCRJqjyq4zVyaUaMGMEmm2xSHP532GGHsf/++wPwyiuv8Pjjj3P66adTVlbGnDlz6Nu3L+effz7//ve/i8P+vvjiCx5++GHmzJmzWKeY9H0WqCRJqmY++eQTGjRoQJ8+ffjZz35GixYtgGxuiYWFnDvvvHOpQwd+yEMPPcSf/vQnNtxwQ4YMGbLEuSl69OjBJZdcwsUXX1xcNehHP/oRX3311RKzfd/YsWOXO8/8+fP58ssv2WyzzQC4++67adOmDZB9cI4INtlkE1JK3HPPPbRq1QqAjz76iIYNG7Luuusye/ZsHn744eIH888++6z4ehdffDGdOnVi2223Xe5MkqSKqbpdI5eladOmjBo1imnTprHxxhszfPhwWrZsCcAbb7xRPG7w4ME8+eST3HbbbUB2bV1owIAB7LTTThx99NGrJZOqNgtUkiRVM+PHj+eMM84gIigvL+fqq68G4LzzzuO3v/0tm2222VInTF0e3bp149BDD2XixIl07tyZgQMHLnbM5Zdfzsknn0xJSQkpJTbddFPuvvvupWZbFXPnzmXvvfdm3rx5lJeXs/322/P3v/8dyIZs9OvXj/nz55NSolWrVlx55ZUAvPzyy5x//vnUrFmTBQsWsO+++xbfy7Bhw/jrX/9KeXk5JSUlDB48eJVzSpLyV92ukQBnnnkmt956K//73//o2rUrLVq04JlnnqFDhw785je/oXPnztSuXZsf/ehH3HjjjavlnNKShEsiS5K0ZkREXaAMoKysjLp16+acaM0bNGgQ8+fP589//nPeUaq9WbNmUa9evYWb9VJKs5Z1vCStLdXx+gheIysSr5EVk5OkS5IkSZIkKVd2UEmStIZU1zvEqhi8OyypovL6qLx5jayY7KCSJEkrbeLEicVJY/Pywgsv0KpVK7bZZht69+5NWVnZEo9755136NChA9tuuy277LIL//3vf4uPXXTRRbRs2ZKSkhL22msvpkyZAsC5555LaWlp8adWrVo88MADa+V9SZIqt8p0jfz1r39Nw4YNiYhFVh1csGABxx13HK1bt6ZFixacf/75xce8Rmp1s0AlSZIqrfLycgYMGMCQIUOYMGECTZs2XeoS2scccwxnnXUW77//Pvvttx9nnHEGAO+//z5XX301o0aNYty4cbRq1YpLLrkEgHPOOYexY8cyduxYhg4dSv369dlzzz3X2vuTJGllrcg18rDDDuP1119fbP8NN9zAJ598UrwW3nfffbz44ouA10itfhaoJEkSkH3QPOecc4rbr776Ku3btweyDqMOHTrQtm1bunXrxr///e/Fnv/MM8+w0047FbcHDx5M3759AUgpMWjQIDp27EhpaSkDBw7km2++WeXMo0ePpkGDBrRr1w7I7gAPHTp0seOmTJnCu+++y7777gvAUUcdxbBhwwCKd4tnz55NSomvvvqKhg0bLvYaQ4YM4aCDDmK99dZb5dySpMqlKl8jAXbeeWc233zzxfaPHz+eXXfdlZo1a7L++uuz8847c8cddyx2nNdIrQ4WqCRJEgCHH344t99+Owvnp7ztttvo168fAEceeSSjRo1izJgxHHfccZx66qkr9Nq33HILX331Fa+++ipjx46lRo0aXH/99YsdN3r06EWGC3z356677lrs+MmTJ9O4cePidpMmTZg8efJix33yySc0atSIiACgXr16rLfeekydOpVtttmGU045hWbNmrHFFlvw/vvvc/zxxy/y/JQSt912G/3791+h9y1Jqhqq8jVyWdq2bctDDz3EnDlzmDZtGiNGjGDSpEmLHOM1UqtLrbwDSJKkiqF58+ZsttlmvPjii3Tq1In77ruPMWPGANmd4gsuuIAZM2awYMEC5s2bt0Kv/cgjj/D666/z1FNPATB79mzWX3/9xY5r3749Y8eOXe7XTSkVi06QdUN9d3tpx333+I8//pjHHnuMjz/+mA022ICjjjqK8847b5E75c899xy1atWiS5cuy51NklR1VOVr5LIcccQRfPDBB3Tq1IkGDRrQuXNnpk6dusgxXiO1uligkiRJRf369ePWW29lxowZtG3bls0224y5c+dy6KGH8sorr7D99tszbtw49t5778WeW6tWLcrLy4vbc+bMKf45pcR5553HIYccsszzjx49mqOPPnqJj5155pkcfPDBi+xr0qTJIndyP/744yVOSNu4cWMmT55c/LBeVlbGnDlzaNCgATfddBMlJSU0aNAAgIMPPpjLL798kecPGTLEO8OSVM1V1WvkstSsWZMLL7yQCy+8EIDf/va3bLfddosc4zVSq4sFKkmSVHTIIYdw7rnn8vnnnxeHLsyZM4cFCxawxRZbAHDNNdcs8blbbrklEyZMoKysjNq1a3Pfffex2WabAdCjRw+uvvpqevbsSd26dZk2bRrTpk1jq622WuQ1VvTucPv27Zk6dSqvv/467dq147rrruPAAw9c7LjNN9+cFi1a8OCDD7Lffvvxj3/8g/333x+Apk2bcvfddzNnzhzWW289Hn/8cVq2bFl87uzZs7nvvvtWKJckqeqpqtfIZZk9ezbffPMNG2ywAW+//Tb33HMPo0aNWuRxr5FaXSxQSZKkooXt+0899RS33347ABtuuCF//OMfadeuHU2aNGGXXXZZ4nMbNmzIscceS2lpKVtuuSXbbrstM2bMAGDAgAF8+umndOrUiYigVq1aXHbZZYt9+F5RNWrU4Oabb6Zfv37MmzePli1bcuuttwLZneZzzjmHRx99FMi+NPTv359TTz2Vhg0bFt/fAQccwAsvvFBcInvbbbflxhtvLJ7j/vvvp7S0lKZNm65SVklS5VaVr5H9+vVj5MiRADRr1ozu3btz6623Mm3aNHbddddirltuuYUmTZoUz+E1UqtTLJzkTZIkrV4RURcoAygrK6Nu3bo5J1J1MmvWLOrVq7dws15KaVaeeSRpIa+PypvXyIrJVfwkSZIkSZKUKwtUkiRJkiRJypVzUEmStBbMmmXnuNYu/5uTVBn4d5Xy4H93FZNzUEmStIZ8d44NKWfOryGpwvD6qArGa2QF4RA/SZIkSZIk5coOKkmS1pCICKBO3jlWQh1gMLA3kIAzgb/nGSgnzYD7gG2BmcAvgWfzDLQKvk5+6JNUQVTi6+OaUAMYC2wF/A64bg2e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mQIFzu8UtmrVqgzvX7hwIcnJyZ5/SEhOTubgwYNccsklZ/3Y/fv3c99997FkyRLKlSvHzTffTEJCAr169Tpl2wceeIDHH3+c1q1bp7m9d+/egQ9c+/fvp0yZMnTs2BGAXr168cgjj9ChQwe++eYbunfvzrp16/BNZyAiElp07cmczF57LrzwQl5++WWio6M5evQozZo1Y+rUqXTq1ImqVauydOlSLrzwQo4dO0aDBg1o2LAh8fHxgO/a9K9//StLXqsXVGFSgpGOS/GahviJiGc+//xz6tSpQ3R0NLGxsaxfv54jR44QHx9PzZo1iYiI4MEHHyR1nr7hw4fTs2dPWrVqRZ06dTK1jz179tCtWzdq165NVFQUr732WuA+51zgDXj79u2JiooiMjKSv//97/zwww+MGTOGsWPHEhMTw9ixYxk/fjzdunULPH748OE89thjgd+7detGfHw8lStXpmfPnoHca9eupVatWsTFxXHvvfdSvnx5Nm3adMbsy5Yt4/7776dSpUpn/EBzOrNnz6Z+/fqEh4fjnKNPnz5MnTo13W2bNWtG8eLFM3y+qVOnUr9+fUqXLg34XtsNN9wAQO3atfn999/59ttvzymriEhO0LUnYzl57alQoQLR0dGAr7EqOjqarVu3AnDxxRdz4YUXAnDkyBGOHj16TllERCT3UA8qEfHE7t276dKlC3PmzCEqKoojR45w7NgxLrjgAt577z2KFy9OSkoK7du356OPPqJNmzYALF68mGXLllGsWLFM7WfAgAF06tSJNm3acPjwYerVq0ejRo2IjIwMbDN79mzCwsKYPn064PtgUbx4cfr160dycnLgG9rx48dnuK9Vq1YFhsjFxsby5Zdf0qhRI3r06MHQoUNp164dH374IaNGjTrtc2zevJnJkyfz9ttvU7p0abp168ZTTz1FkSJFAJg5cyZDhw5N97GvvvoqDRs2THPb1q1bKVeuXGA9PDw88Ob/XCQkJNC3b9/Aeo0aNZgyZQp33nknc+fOZc+ePWzZsoVatWqd8z5ERLKLrj3pC4Zrz65du5g+fTpz5swJ3LZhwwY6dOhAYmIid999d6D3FMCECROYOXMmV111Fc899xxVq1bN8PlFRCT4qYFKRDzx1VdfERsbS1RUFAAFCxakYMGCHD9+nKeffpq5c+eSkpLC77//TlxcXOBDQqtWrTL9AQFg1qxZrFy5MvDGet++faxfvz7Nh4To6GgefvhhBgwYwA033JDmDfDZuOmmmwJv5mNiYvjll1+IiYnh559/pl27dgC0a9futPmnTZvGLbfcwl133cX8+fMDc2ucqE2bNoG/RWaY2SnD7c51+N2mTZtYvXo17du3D9w2fvx4HnzwQUaOHEnt2rWpXr36eQ9/ERHJLrr2nCoYrj2HDx+mQ4cODBw4kOrVqwduv/rqq1m9ejV79+6lS5cufPHFFzRq1Ih+/frx2GOPUaBAASZPnkzLli35+eefM51PRESCk4b4iYgnUocgnGzy5MmsXr2aJUuWsGbNGm677TYOHz4cuP9sx8WbGXPmzGHVqlWsWrWKjRs3BuZPSnX11VezcuVK6tevz4QJE2jevHm6z1WgQAFSUlIC6yfmAt8HnVT58+cnOTk53Tfpp9OsWTNef/111q1bR+vWrXnxxRf57bff0mwzc+ZMYmJi0l2+/PLLU54zPDycLVu2BNa3bNlC2bJlM5XnZBMnTuSWW27h4osvDtxWqVIlPv74Y1auXMmrr77K9u3bueaaa87p+UVEspuuPafy+tqTnJxMx44dqVevHgMHDkx3m2LFitGqVSumTJkCwJVXXhn4MqRr167s3buXHTt2ZOr1iohI8FIDlYh4on79+qxYsYI1a9YAvvklkpKS2LdvH2FhYRQqVIidO3fy/vvvn9d+WrVqxfPPPx/4UPLzzz+zb9++NNts27aNCy64gI4dO/Liiy+ydOlSAC655BL2798f2K5ixYqsWbOG5ORkkpKSmDVr1hn3f+mll1KxYkVmzpwJ+N7k7927N91tL7nkEu666y6++OILpk6dysGDB2nWrBnx8fH8+OOPgO9b7NQPPCcvJw+xAGjevDmLFy9my5YtmBlvvPEGt9xyy5n/cOmYOHEiPXr0SHPb77//Hvh9xIgR1K1blypVqpzT84uIZDdde07l5bUnJSWFbt26UaZMGZ599tk0923cuDEw79ShQ4f4+OOPiYiIAGD79u2B7ebPn0/BggW54oorzvh3kXM3fPhwhg8f7nWMLLFo0SIiIiKoXLkyHTp0ICkpKd3t1q1bR1xcHFWqVKFp06b8+uuvgfumT59O1apVqVSpEn369OH48eOA79hs1aoV0dHRRERE8Omnn+bIa8qrdFxm7rh8/PHH03yxUKBAAWbMmJEjr+tsqYFKRDxx2WWX8e6779K7d2+io6OpX78+//vf/+jevTu//fYbUVFR9OjRgyZNmpzXfl566SV2795NVFQUERER9O7dmyNHjqTZZu3atdSrV4+YmBiaN28emKejXbt2fPHFF4GJauvXr0+dOnWIiIigc+fO1KhRI1MZxo8fzz//+U/i4uJYtGgRJUuW5NJLL83wMRUqVODRRx/lu+++48knnzznYXOXXHIJL7/8Ms2aNaNSpUqEhYVx++23A74PLCeWQ2/cuDH16tXjt99+o2zZsgwZMiRw31dffUVycjINGjRI8/zTp0+nSpUqVKpUiW+//faMc6WIiHhJ157guvZ8+umnvPfeeyxZsiTwwenFF18E/hqOGR0dTVxcHLGxsfTp0weAwYMHExkZSXR0NMOHD+fDDz8kXz59rDlbqR9ec1JycvJ55TjfzCkpKfTs2ZOEhAQSExMpX748I0aMSHfb1KGkP/30E23btmXw4MHAX1Uq582bR2JiIrt27SIhIQGAgQMH0rRpU1avXs1HH33EXXfdxYEDB84rc16j4zLrj8uhQ4cGvlSYOnUqRYsW5cYbbzyvzNnGzLRo0aIlWxagMGCAJSUlWV71559/Bn5fuHChValSxcM0OS8pKclSjwOgsAXBsalFi5bQXXTt8dG1J/iuPac7Ng8cOGDt2rWzyMhIi4iIsEceecTMzPbs2WNt2rSxiIgIa9u2rbVs2dLGjRtnZmbXXXedzZs3L/Ac5cuXt8TERDMze/DBB61WrVoWFRVlrVq1sp07d5qZ2YIFCywuLs7uuusuq1Wrlq1YscK++OILa9CggcXGxlqDBg1s7dq1ZmZ25MgR69Wrl11zzTUWHx9vXbt2tWHDhmX4N582bZrVqVPHatSoYfHx8bZlyxYzMxs2bJj16NHDWrZsabGxsbZx40YrXbq0/f3vf7d69erZjBkzbPHixRYXF2eRkZHWuHFj+/HHH0+b+XwsXbrU4uLiAuvr1q2zatWqnbLdb7/9ZiVKlLCUlBQz8/1/Klq0qJmZvffee9axY8fAtp9++qnddNNNZmb2t7/9zdasWRO4r0aNGjZ16tTAuo5LHZfpye7j8kSPPfaY9enTJ81twXRcaiZbEZFstmDBAh577DHMjIsuuijwbYaIiEh20bUn90ivoiP4huWEh4czY8YMNm3aRFRUVKaG6T/66KNcfvnlADz//PM89dRTvPDCCwCsXLmSN998k+joaP744w+aN2/OnDlzKF68OF999RW9evVi2bJljBkzhj/++IPvv/+evXv3EhsbS6VKlU67z8TERF555RUWLFjAxRdfzDvvvMPAgQOZOnUqkLYS5qZNm9i+fTsNGzbkmWee4ciRI1x99dVMnTqVevXq8d5779GtWze++eabUzKfbPny5Wl6g59oyJAhdO7cOc1tma0wuW3bNsqWLRuYy61IkSJcdNFF7N69O8PnSK1uHBkZyZo1a1i3bl2a+dhyEx2XoXNcpjIzJk2axOTJk0/7N/OaGqhEJFf6/fff0614lN5J32utW7emdevWXscQEZHzpGuPZIfTVXRcsGABY8eOBXzDL6+//vpMPd+sWbMYNWoUBw8e5NChQ1SoUCFwX0REROAD9VdffUViYmKaIa27du3CzFiwYAHdu3cnX758hIWFpangm565c+fyww8/UK9ePcA35KlQoUKB+0+uhFmsWDFatmwJwI8//kjx4sUDj+3cuTP9+vULzMV2YuaT1apVi1WrVmXq7wKnVph0zqVbUODk7U7cPr37UtdfeOEFHnjgAWJiYqhatSr16tXLtdWNdVyGznGZ6osvvqBAgQLUr18/09lyWu783yIieV6JEiXO6sQvIiJyvnTtkeyQWtFx7ty5TJgwgRdeeIH58+cDaT9gmv1VhfJ01R03bdrE4MGD+fbbbyldujQzZ87kueeeC2x3YkVKM6NOnTrMnj073Vyn23d6zIz27dszZsyYdO8/uRLmyTnSe77U/WdURfNse6qcXGFy8+bN6VaYLFeuHFu3bg3kSEpK4vDhw4SFhREeHh7oRQNpq1SWKFGCd955J3BfRERErq1urOMydI7LVAkJCacUPAo2mk1QROQ0VBkkc5VBZs+eTXR0NDExMURGRvLaa6/lyGsSEQlFuvZk7trzxhtvEBkZSVRUFDVr1mTevHk58pqyw+kqOjZp0oQJEyYAvg+bCxYsCDymYsWKfPvttwAsXLiQHTt2APDnn39SsGBBLr/8cpKTk3nzzTdPu9969eqxevVqli9fDvgmal6xYkVg35MmTSIlJYU9e/acseLXDTfcwEcffcTGjRsBOHbsWKBa5plcc8017N27N/C6p06dSpUqVShatOgZH5vaUyW9Jb1ejbVq1WL37t2B1/n666+nOzytZMmSVK1aNVAJ86233qJdu3ZAxlUqd+/eHThGU4dRNWvWLFN/h2Cj4zJ0jkvwVUOdNm0a3bt3z9Tr94oaqEQkT1FlkKyvDNKgQQNWrFjBqlWr+Oqrr3juuecCpclFRETXnuy49lStWpUvv/ySNWvWMH78eLp06cKxY8fOK7NXTlfRcejQoWzatInIyEgeeughmjZtGnjMI488wpQpU6hTpw4zZswgPDwcgMjISFq2bMnf/vY3mjVrRkRExGn3e9lll/HBBx/wwAMPEB0dTfXq1Xn//fcB6Nu3L5deeinVq1ena9euZxzGVbVqVcaMGUPHjh2JiooiJiaGzz//PFOvv2DBgrz33nvcd999REVF8dprrzFp0qRMPfZs5cuXj3HjxtG9e3cqV67Mxo0bGTRoEODr9dKiRYvAtqNHj+aJJ56gSpUqfPjhhzzzzDNAxlUqv/rqK6pVq0aVKlX4z3/+k6srTOq4DJ3jEuDDDz8kJiaG8uXLZ8tryDJeztCuRYuW0F7IoJKSKoOEZmWQ33//3UqXLm3r168P3BZMlUG0aNES+ouuPXnv2pOSkmKXXHJJ4O9vFpzXnoyOzczo0aNH4LiU3EnHpQSjYDouNQeViHhClUFCqzLIl19+yT333MPPP//M008/TdWqVU/7dxMR8YquPaF17Uk1efJkqlevHvi3EBGR3EkNVCLiCVUGCa3KIA0bNmTt2rX8+uuv3Hzzzdx0001qpBKRoKNrT2hdewC++eYbHn300cDkzaFs/PjxXkfg8ccfZ9q0aWluK168eJp5iCRv0XEpWSl3DogVkVwvtTJI/fr1mTBhAs2bNw/cd66VQaZPn87atWt54YUXAvdB+pVBTpyscNu2bYF9nktlkNTnWbt2bWAixZP3m16O9J4vs5VBYmJi0l3ee++9U7Y/l8ogwCmVQU58jvQqgwCUKlWK+vXr89FHH502v4iIV3TtCa1rz/fff0+nTp2YOnUqlStXPm12yTpDhw5NcxzHxMTQtWtXT7IMHz6cihUr4pzj559/TnNf69atueKKK9I95kaPHk2lSpWoVKkSQ4cODdz+xBNPUK1aNaKjo6lfv35gwmoJficfl6tWrQo0TvXs2TPwBUROq1WrVuA8WbFiRYoXL37KNvHx8WmO0xkzZhAbGxsoAvH222/nZGTPqYFKRDyhyiChUxkkMTEx8OFt7969zJs3L8PJL0VEvKJrT+hcezZs2EDr1q0ZN24ctWvXztTrl9DSvHlzFi5cmO6kzw888ABz58495fYNGzbw/PPPs3z5cn744QfmzJkT+P9ep04dVqxYwerVq/nHP/5Bt27dsv01SGhbvnx54Dx566230qVLlzT3v/XWW5QqVSrNbaVKlWLWrFmsXbuW2bNn8+CDD7J9+/acjO0pNVCJiCdUGSR0KoPMnDmTyMhIoqOjadSoEb169UrTK0FEJFjo2hM6157BgwezZ88eBgwYEOihsGHDhmx5LbnBwYMHad++PVFRUURGRvL3v/8d8A0JrVu3LjVq1KBGjRrMnj078JgKFSowZMgQrrvuOipWrMjChQt54IEHiIqKol69euzcuRPw9VS69dZbiY+Pp1q1atx5550cPXr0lAx79uyhW7du1K5dO3B8ZZTtfNWtWzfw//FkzZo1S7e3ygcffMDNN99MsWLFuPDCC+nVq1dg/rb4+HguvvhiAGrXrp3ufGdy7vLiMZrKzJg0aVKaqnrbt29n7NixPProo2m2rV27dqDRqnTp0pQsWZJff/01S/MENS9naNeiRUtoL5xnVRAzVQYJBcFUGUSLFi2hv+jaI2bBee3JimPzdD744AO74447Aut//PFH4Ofx48fNzGzLli1WtmzZwHr58uXt8ccfNzOzqVOnWuHChe2LL74wM7O+ffvak08+aWa+6pDh4eG2e/duO378uLVt29ZeffVVM/P9X3nzzTcDv8+YMcPMzA4dOmQxMTG2Zs2a02Y7WXR0dLrLww8/nOFrP7Gy5ok2btxoZcqUSXNb//797ZVXXgmsz5o1y1q1anXKY5944gm79dZbM9zvuchrx+WJ8vIx+t///tcqV66c5ra2bdval19+me5xmurzzz+3ChUq2JEjRzJ8/vMVTMelJkkXERERERHJxU5XAGDHjh306NGDX375hQIFCrBjxw62b98emPOmQ4cOANSoUYOiRYvSsGHDwPqyZcsCz9+mTRvCwsIA6NWrFxMmTKB///5pMsyaNYuVK1cG5nXat28f69evJzY2Nt1sJzubSfjPldmZJ96fOXMmEydOZNGiRdmeJy/Jy8doQkICPXr0CKy/8847lCpVigYNGrBp06Z0H/PLL79w++23M3nyZC688MJz2m9upAYqEQlqqgwiIiI5TdceyW1SCwDMnTuXCRMm8MILLzB//nzuueceunbtyp133glAWFhYmsn8CxYsCED+/PkDv6euJycnB9ZPnsj/dBUZ58yZw5VXXnnKfellO1lMTEy6r+2GG25gxIgRZ/gLZM6ZJt5fuHAhDz74IPPmzeOKK67Ikn2KT149Rg8ePMj06dPTzBX45Zdf8tFHH/Hpp5+SnJzMb7/9RqVKlQKT/W/fvp2bbrqJV155hWuvvTbd5w1VaqASETmDoUOHpqnyIiIikt107ZGzsW3bNsLCwujYsSPXXnstVatWBXw9RFIbYN5991327NlzTs//0Ucf8c9//pNLL72UhISENPO0pWrVqhXPP/88I0aMCFTWu+KKK/jzzz/TzXaynOhB1aFDB+Lj4/m///s/ChUqxLhx43j66acBWLp0KT179uTjjz/m6quvzvYseU1ePUanT59OzZo108yXNmrUqMAciJs2baJBgwaBxqldu3YRHx/P0KFDadOmzVnvL7fTJOkiImfJy3K199xzD1FRUdSoUYOGDRuydu3aU7Y5uVzt2LFj05QDL1SoEC+//DKgksoiIrmFl9ee4cOHU7FixcAHuhMlJCQQGRlJTEwMDRo04Mcffwzc9+2333Lttdfyt7/9jWuuuSZQDbFfv36Ba1JUVBTOOVavXp2jrynUnK4AwJNPPsm9995L/fr1+eabb047qfiZNG7cmNtuu43q1atTrFgx+vTpc8o2L730Ert37yYqKoqIiAh69+7NkSNHTpvtfA0ZMoSyZcuybds2GjZsSOPGjdPkrVevHr/99htly5ZlyJAhAFSqVImBAwdSs2ZNqlWrRrNmzQINGf379+fQoUN069YtcHweOnQoS7JK3jxGwXeOPHFy9DN59tln2bhxIyNGjAgch19++WWW5Ql2znwTo4mIZDnnXGEgCSApKYnChQt7nChr9OzZkwYNGtC7d+8c3/e+ffu49NJLAd8cCc888wxLliwJ3P/WW2/xxRdf8Nlnn7Ft27ZTHr9//37KlCnDjz/+SOnSpZk7dy4NGzbk4osv5tNPP+Whhx7ihx9+yNLMBw4coEiRIqmrRczsQJbuQETkBLr2ZL2vv/6a0qVL06hRI+bPn0+lSpUA39CV0qVLk5iYyBVXXMHIkSP5/PPPmTp1KklJScTExPD+++8HPugfPXo0cA1LNW/ePO6//37WrVuXpZmD8dqTW4/N4cOHk5yczL/+9S+vo+R6Oi6zh47R8xNMx6V6UIlIrpUXy9We+MZ+//79ae47XbnaE02dOpX69etTunRpQCWVRUTOVl689tStWzfdXg0pKSk450hKSgJ8X6KUKVMGgLfffpvrr78+MGfLxRdffErjFJx97wIREQldmoNKRHKt2bNnExYWxvTp0wECY9bj4uJYsmQJ+fLlY+vWrdSvX5/NmzeTL5+vTb5QoUJ8/vnnvP/++7Rq1YpPP/2Ul19+mX79+vHmm2/yf//3fwAsWbKElStXUqxYMTp06MAbb7xxSjWQAQMG0KlTJ9q0acPhw4epV68ejRo1IjExMd1sJzuXyRYHDRrE1KlTOX78OHPmzAncfs899zBixIgMK30kJCTQt2/fdO8bPXo0rVu3Pu1jRUQk71570lOkSBHGjBlDdHQ0RYsWpXjx4oFevak9ouLj49m5cyeNGjXi2Wef5aKLLgo8PikpiRkzZvDUU09lep+S84YPH+51BJEM6RgNHepBJSK5VnR0NAsWLGDAgAF88sknFC1aFPCVq23Xrh0RERG0bt06UK42VUblan/55ZfAdqnlavPly0evXr3473//e0qGWbNm8Y9//IOYmBjq1q3L3r17Wb9+/WmznWzVqlXpLhl9QBgxYgSbNm3ilVdeYdCgQUDacrWns2nTJlavXk379u1PuS+1pHLq3FQiIpK+vHrtSc/+/fsZPXo03333Hf/73/9o27YtDz74IADJycksWLCAyZMns2zZMvbu3cuzzz6b5vEffPABderUoVy5cme1XxERCU1qoBKRXCu1XG39+vWZMGECzZs3B3w9idq2bct3333HqlWrKFKkSLaXq019c79x40Y6dux42mwnO3Hy8hOX1IanjLRv356lS5eya9euQLnaChUq0KBBg0C52hNNnDiRW265JTCkL1VqSeVPPvlEJZVFRM4gr197TjR37lwuu+yywPC/rl27smjRIgDCw8O54YYbuOKKKyhQoACdO3dm2bJlaR6fkJBAjx49zmqfkv02bdqUptiKFxYtWkRERASVK1emQ4cOgWGkJ+vbty9lypTBOZfm/xHAL7/8wo033sg111xD1apV+fjjjwE4cuQI3bp1IzIykmrVqtG/f3+OHz+e7a9Jzk9uOS53797NTTfdxDXXXENkZCR33HEHR44cSbPN0aNHiYiISPPF8uLFi6lduzYFCxbksccey/bXEqzUQCUiuda2bdu44IIL6NixIy+++CJLly4FsrZc7Z49e0hJSSEhIYEmTZqcsk1qudrUghM///wz+/btO222k53tt9jr168P/P7f//6XggULctlllzFq1Ci2bdvGpk2bWLRoEVdeeeUplZYmTpx4ygeB1JLKM2fOVEllEZFMyIvXntMpX748y5YtC7zW2bNnU716dQBuvvlmlixZwsGDBwP3RUVFBR67detWvv3220DPMpFUKSkp9OzZk4SEBBITEylfvvxpj82uXbumW4E4JSWFDh068NBDD7F+/Xq+//576tatC8CECRM4evQoa9euZe3atSxfvjzNnHEi6cnscemcY8iQIaxfv57Vq1dz6NChU0YoPPHEE9SsWTPNbWXLlmXMmDFn/UVBqFEDlYjkWnmxXO1dd91FREQEMTExPP7448yYMSPdb9dP9tVXX5GcnHzKEECVVBYROTt58dozZMgQypYty7Zt22jYsCGNGzcGfPNu3X333dSrV4/o6Gg++eQTXnzxRQAqVqzIPffcQ1xcHJGRkezevTswzxbApEmTaN++PYUKFcqSjJK+oUOHMnTo0MD60qVLqVWrFgDPPfcccXFx1KhRg8aNG7Nhw4ZTHr9w4cI07x3Gjx9Pt27dAF9PvuHDh1O7dm1iYmLo06cPx44dO+/My5cvJywsjNjYWMDXS2rq1KnpbtuoUSNKlix5yu3z58+nZMmSxMfHA1CgQAEuv/xyAPLly8fBgwc5duwYR44c4ejRo5QqVeq8c0vmhfJxGRYWRqNGjQDfsVarVq00RYhWr17NsmXL6NWrV5rHlS9fntjYWAoUyOPThJuZFi1atGTLAhQGDLCkpCTLTYYNG2aPPvqo1zFCQlJSkqUeB0BhC4JjU4sWLaG76NojZsF57fHi2ExMTLSKFStaSkqKmZn179/fXnrpJTMz27lzZ2C7qVOnWvv27c3MbOPGjVamTBkzM1uwYIFde+21ge3GjRtnXbt2Dfw+cODAwHP37dvXRo4ceUqGZcuWWXR0dLrLu+++e8r277//vnXo0CGwfuDAAStSpEiGrxOwY8eOBdZfeukl69ixo7Vr185iYmKsR48etnv3bjMzO3LkiHXu3Nkuu+wyK1y4sD322GMZPndW0nHpk1eOy0OHDllERITNnj3bzMyOHTtm1157rSUmJp7yGlJ5cR0IpuMyjzfPiYiIiIiIhKZKlSpRokQJFi9eTN26dZk2bRorV64EfL1Wnn76afbt28fx48c5evToWT33rFmzWLFiBZ999hkAhw4dOmWeS4BatWqxatWqTD+vWdq515xzmeotfqLk5GQ+++wzli9fzlVXXcWjjz7KQw89xLhx45g7dy5FihTht99+Y//+/TRu3JhmzZpx3XXXndU+5NzlheMyJSWFHj160KRJE2688UbAV+iodevWVKpUiW3btmV633mJGqhERNKhcrUiIpLTdO2R7NC9e3cmTpzIvn37qFGjBiVKlODIkSPcdtttfP3111SrVo01a9bQokWLUx5boEABUlJSAusnTvxvZjz55JN06dIlw/0vX76c3r17p3vfkCFD6Ny5c5rbwsPD2bJlS2B98+bNZz05dnh4OHXr1uWqq64CfHNVderUCYAxY8bQt29fChQoQFhYGM2bN2fx4sVqoMphoX5c3nvvveTLl4+XXnopcNvixYtZs2YNo0eP5vDhw+zdu5fGjRuzcOHCDLPmJZqDSkSE3FMZBGDdunXExcVRpUoVmjZtyq+//grAJ598kqYaU7FixRgwYACgyiAiIsEoN117Tlctbc+ePTRr1oxLL730lHkOAebNm0dsbCwRERFUr16d7du3Z9trkfR16dKFGTNm8NZbb9G9e3fA94H++PHjXHnllQCMHj063cdeddVVJCYmkpSUxLFjx5g2bVrgvlatWjFq1CgOHDgA+I6FX3755ZTnSO2pkt5yciNA6va7d+8OTH7++uuvc8stt5zVa27evDmJiYns2rULSDtJf/ny5Zk7d27g7/D5558HJveXnBPKx+UjjzzC1q1bSUhIIF++v5pcPv74Y7Zs2cKmTZt49913qVWrlhqnTqIGKhGRIHA2FWv69evHY489xk8//UTbtm0ZPHgwAC1atAhcWFesWMEll1wS+PZIlUFERORkWVEtLfWLj8mTJ59y39atW7nnnnuYNm0a3333HUuWLKF48eJZ/jokY2FhYdSrV4/PPvuMNm3aAHDppZfy6KOPEhsby3XXXRdoEDhZmTJluOeee4iJiaFFixZUrlw5cF/Pnj1p3rw5devWJSoqiuuvvz7NZNDnKl++fIwbN47u3btTuXJlNm7cGHj/snz58jQ9arp37x5o5K1QoUKgoaNo0aI8//zzNG3alOjoaP773//ywgsvADBs2DA2btxI9erVAxNxt23b9rxzy9kJ1ePy+++/Z8SIEWzYsIG4uDhiYmIy9f575cqVlC1blhdeeIFXXnmFsmXLBoY95ileToClRYuW0F7waKLaf/zjH/aPf/wjsP71119bzZo1zczs2WeftVq1allMTIxdd9119vPPP5tZ5ideTElJsWHDhllcXJxFR0fbXXfdZUePHj3vzEuXLrW4uLjA+rp166xatWqnbPfbb79ZiRIlAhM//vnnn1a0aNFTtps/f75VqVLllNvz+sSLWrRoCf1F157My+y150ScNBl1qvQm/B0yZIg99dRT553zXATjtcerY1OCh45LCUbBdFyqB5WIhJzbb7+dyZMnp150mTRpUuAbtTvuuINly5axcuVK+vfvf9Y9iiZMmMCff/7J0qVLWbVqFfny5eONN944Zbvly5enGW534vLee++dsv3WrVspV65cYD08PDzdb3u2bdtG2bJlA5MyFilShIsuuojdu3en2S4hIYEePXqc1WsTEZFzF8rXnnO1bt06du/eTePGjYmNjWX48OGBv4+IiMjJNEm6iIScUK4McvJ2J26f6sCBA3z44Yd89913md6/iIicn1C+9pyr5ORkli5dyqeffkq+fPlo06aNvkAREZHTUgOViISkUK0MUq5cObZu3Rr4UJGUlMThw4cJCwsLbDNt2jTi4uLSfCsuIiLZL1SvPecqPDycRo0aUaRIEQA6dOjAsmXL1EAFgQmcJW8J9n/3YM8n2SOY/t3VQCUiIalLly48/vjj7Ny587wqgxQsWJBp06ZRokQJ4K/KIK1bt6Zw4cLs2bOHPXv2ULFixTTPcbbfYp9YGSQ2Nva0lUFKlixJ1apVmTlzJm3btuWtt96iXbt2abbRt9MiIt4I1WvPuerYsSPPPvssAwYMwDnHvHnzuOmmm7Ls+XOzkiVLeh1B5BQ6LsVrmoNKREJSqFYGAd+HmyeeeIIqVarw4Ycf8swzzwTu+9///sc333xDhw4d0jy/KoOIiGS/UL72nK5aGviGN3bs2JFly5ZRtmxZRo0aBUDjxo2pV68ekZGRREdHU65cOe68887zzi0iIqHJaaJCEckuzrnCQBJAUlIShQsX9jiReOHAgQOB4R1AETMLnn7EIhJydO0RCM5rj/NN8FXI6xwSNA5aEHwY13EpJ/H0uNQQPxERERER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tMaNG9uPP/542sznY+nSpRYXFxdYX7dunVWrVu2U7X777TcrUaJEoJjBn3/+aUWLFjUzs/fee886duwY2PbTTz+1m266Kc3jhw0bZo8++ugpzxts114dl3nruDQzS0lJsUsuuSTw9zcLvuNSixYtobtoDioRERGRIDZ79mzCwsKYPn06QKCX3OOPP054eDgzZsxg06ZNREVFccstt5zx+R599FEuv/xyAJ5//nmeeuopXnjhBQBWrlzJm2++SXR0NH/88QfNmzdnzpw5FC9enK+++opevXqxbNkyxowZwx9//MH333/P3r17iY2NpVKlSqfdZ2JiIq+88goLFizg4osv5p133mHgwIFMnToV8A19W7ZsGcWKFWPTpk1s376dhg0b8swzz3DkyBGuvvpqpk6dSr169Xjvvffo1q0b33zzzSmZT7Z8+XJ69+6dbqYhQ4bQuXPnNLdt3bqVcuXKBdbDw8MDPRhPtG3bNsqWLRvoZVikSBEuuugidu/enennyO10XIbmcTl58mSqV68e+LcQEclJaqAKUb///jvx8fGn3J7eRU9EJC/T+VKCXXR0NA8//DADBgzghhtuCByvCxYsYOzYsQBUqFAh0/OdzZo1i1GjRnHw4EEOHTpEhQoVAvdFREQEPlB/9dVXJCYmphkeu2vXLsyMBQsW0L17d/Lly0dYWBjt27fPcJ9z587lhx9+oF69eoBvyFOhQoUC959cVbNYsWKBapQ//vgjxYsXDzy2c+fO9OvXLzB32omZT1arVi1WrVqVqb8L+EYWnDi01TmX7lDXk7c7cfv07svscNncRMdl6B2X33zzDY8++migqqyISE5TA1WIKlGixFld+ERE8iqdLyXYXX311axcuZK5c+cyYcIEXnjhhcAHyNNVTyxQoAApKSmB9dQKlps2bWLw4MF8++23lC5dmpkzZ/Lcc88Ftjux8qOZUadOHWbPnp1ursxWbky9v3379owZMybd+0+uqnlyjvSeL3X/GVXkPNueKuHh4WzZsiWwvnnz5nQrQpYrV46tW7cGciQlJXH48GHCwsIIDw8P9KKBjKtK5mY6LkPruPz+++/p1KkTU6dOpXLlyqfNLiKSnTRJunhOFVZU+UdEMk/nzMydM1MlJiZSqFChXH3e3LZtGxdccAEdO3bkxRdfZOnSpYCveuKECRMA34fNBQsWBB5TsWJFvv32WwAWLlzIjh07APjzzz8pWLAgl19+OcnJyYHqh+mpV68eq1evDkwyn5KSwooVKwL7njRpEikpKezZs4cZM2Zk+BpuuOEGPvroIzZu3AjAsWPHApU3z+Saa65h7969gdc9depUqlSpQtGiRc/42NSeKukt6fWQrFWrFrt37w68ztdffz3d4WklS5akatWqzJw5E4C33nqLdu3aAdC8eXMWL17Mli1bMDPeeOONTA1xy210XIbOcblhwwZat27NuHHjqF27dqZev4hIdlADlWQLVVhR5R8RyTydM7P+nAm+3gz33nsvbdq0Oa+sXlu7di316tUjJiaG5s2bM2rUKACGDh3Kpk2biIyM5KGHHqJp06aBxzzyyCNMmTKFOnXqMGPGDMLDwwGIjIykZcuW/O1vf6NZs2ZEREScdr+XXXYZH3zwAQ888ADR0dFUr16d999/H/BVrLz00kupXr06Xbt2PeMwrqpVqzJmzBg6duxIVFQUMTExfP7555l6/QULFuS9997jvvvuIyoqitdee41JkyZl6rFnK1++fIwbN47u3btTuXJlNm7cGLjuLl++PE1VztGjR/PEE09QpUoVPvzwQ5555hkALrnkEl5++WWaNWtGpUqVCAsL4/bbbwd88xKVLVuWF154gVdeeYWyZcuycuXKbHkt2U3HZegcl4MHD2bPnj0MGDAgUOF0w4YN2fJaREQy5PUs7Xl5IQcqUqnCSuhVWDld5Z+spootWoJt0TlT50yzsztnjhw50h5//PFsP29mdxW/zOrRo0fguJTcKdiuvTouxSz4jkstWrSE7qI5qEKcKqyEZoUVEckeOmeGzjlzy5YtTJw4kS+++IKnnnrqtH8vEREREQkOaqAKcaqwEnoVVkQk++icGTrnzH79+vHiiy9y4YUXZjpTbjd+/HivI/D4448zbdq0NLcVL148zTxEkrfouBQRkcxSA1WIU4WV0KqwIiLZS+fM0Dlnfv3119x6660A7N27F/DNu5U6H4tkj6FDhzJ06FCvY4ikoeNSRCR30CTpIU4VVkKnwoqIZD+dM0PnnPnHH3+wadMmNm3axIMPPkj//v3VOOWBnj17Bnof5rThw4dTsWJFnHP8/PPPae7LqILkt99+y7XXXsvf/vY3rrnmmsD/7+HDh3PllVcGJpHW8RQavDxGly1bRp06dYiJiSEqKipwnoPT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5z9Mnz6dBQsWULhwYWbOnMkVV1zB8OHD+fHHH9m9e3dg8svRo0dz4YUX0rNnTxo0aEDv3r3Zs2cP9913Hz/99BOHDx+mb9++3HvvvafNllUqVKjA/PnzqVSp0in3bdiwgVq1avHrr79y0UUX8dxzz7Fr1y6ee+45wDf55Zo1a9K8kTnxNQWzAwcOUKRIkdTVImZ2wMs8IrnlnKnzZebOlyd66623mDJlCnPmzElze146X+aW4zs9w4cPJzk5mX/9619eR8n1gu3am5uPyxPpGD0/wXZcikjoUg8qyZS8WFklMxISEujYsWPgw9bWrVupUqVK4P7w8HBmzZp1Ts8tIrmTzpfpO/l8efJ9ffv2PafnFREREZHQoAYqyZS8WFnlTMyMSZMmkZCQkOa2kyfdTG8SThEJXTpfniq982WqTZs2sXr16jRz+UnuMnz4cK8jiGRIx6iISO6ggfOSKamVVerXr8+ECRMCw1Luuece2rZty3fffceqVasoUqRItldWSZ1wcuPGjXTs2PG02U524mS8Jy6DBg06p7/JokWLcM6lqZ5yctWVLVu2pKm6IiKhT+fLU6V3vkw1ceJEbrnlFi6++OJzem7JeZs2bfL82rZo0SIiIiKoXLkyHTp0ICkpKd3t+vbtS5kyZXDOpfl/BL7J+KtWrUqlSpXo06cPx48fB+CNN94gMjKSqKgoatasybx587L99cj5C4Xj8tdff6VWrVrExMQQERFB3759OXbsGADjx48nLCwscD6+//77c+Q1iYjkJDVQSabktcoqmZGQkECPHj3S3NahQwfef/999u7dy9GjRxk3blyg6oqI5A06X54qvfNlqokTJ572PpH0pKSk0LNnTxISEkhMTKR8+fKnPTa7du0aqIR2ov3793Pfffcxb948EhMT2bVrV6CHX9WqVfnyyy9Zs2YN48ePp0uXLoFGApHTyYrj8vLLL+fLL79k1apVrF27lt27dzNu3LjA/S1atAicj1955ZVsey0iIl5RA5Vkytq1a6lXrx4xMTE0b978lMoq9evX55tvvjnvyirVq1enWLFip62ssnv3bqKiooiIiKB3794cOXLktNnO15AhQyhbtizbtm2jYcOGNG7cOHDf4cOHef/99+nevXuax1SqVImBAwdSs2ZNqlWrRrNmzWjatCkAM2fOpGzZskydOpVHHnmEsmXLsnPn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cQS33norAAcccACPPPJI+TZ22mknXnnlFQAGDx5Mr1696N69O0ceeSQzZ84E4LHHHmPPPfdk4MCB9OrVi5deeoknnniCPn368JnPfIY+ffrwt7/9DYCFCxdyyimnsPvuu/P5z3++fNurM2rUKPbee2969uzJ5z//eaZNmwYUPrEdMGAARxxxBHvttRdTpkyhffv2XHjhheyzzz7cf//9PP300+y5557U1tZy4IEHMmnSpFVmXhfjxo2jbdu29OzZE4DTTjuNkSNHrrDdjBkzePnll8tvmE499VRGjRoFwJgxY9hnn32oqakhpcTAgQPLt7HjjjvSs2dPmjdvvk45K4F1aV1WKmuz6dQmwHXXXUefPn3o3LnzOmXNzbpsOnW5//7707p1awC6du3KokWLePfdd9cpsyRJ0vIq8t3ZmDFjaNu2bflF0+zZswH4/ve/T01NDffccw9TpkyhtraWr371qx97exdffDFbbbUVAFdccQU//OEPueqqqwAYP348N998M927d2fWrFkcdthhPPjgg7Rp04Y///nPnHzyyTz33HPccMMNzJo1i7///e/MmTOHnj170qFDh1Xe5+TJk7n22msZO3Ysm266Kb/+9a8599xzyy/2nnrqKZ577jlat27NlClTePPNN+nTpw8//vGP+eCDD9h1110ZOXIkvXv35q677uLEE0/k2WefXSHz8saNG8c3vvGNlWa66KKLOO6445Y5b9q0aeywww7lcU1NTfnF99KmT5/O9ttvT0oJgFatWrHJJpvwzjvvrPFtNHbWpXVZqazNplObU6dO5fbbb+fxxx/nhz/84Sp/Xo2Bddl06nJpd9xxB126dCn/LiRJkupLRTaounfvzvnnn8/gwYM55JBDOPTQQwEYO3Yst9xyC1D4VPVzn/vcGt3e/fffz3XXXcf8+fN5//332WmnncqXde3atfzi8M9//jOTJ0/mwAMPLF8+c+ZMIoKxY8fSr18/mjVrRtu2benbt+9q7/Ohhx7iH//4B7179wYK0/dbtGhRvvyII44ofxoJ0Lp1a774xS8C8M9//pM2bdqUr3vccccxaNAg/vOf/6yQeXl77LEHL7zwwhr9XKCwK0nphSpASmmZ8aq2W3r7lV22sm0bO+vSuqxU1mbTqc1Bgwbxk5/8hI022miNM1Uq67Lp1GXJs88+y8UXX7zMLDdJkqT6UpENql133ZXx48fz0EMPcdttt3HVVVeVXwwt/WIpIsrfN2/enCVLlpTHCxYsAGDKlClceOGFPP/882y33Xbce++9XH755eXtWrZsuczt7bXXXowZM2aluVZ13ysTEfTt25cbbrhhpZcvfb8ry7Gy2yvd//LXXdrafupaU1PD1KlTy+M33niD7bfffoXr7rDDDkybNq2cY+7cuSxYsIC2bdtSU1NT/kQYCjMAVnYbjZ11aV1WKmuz6dTmM888w/HHHw8UdoWDwvpGP/7xj1f5GCqVddl06hLg73//O8ceeywjR46kY8eOq8wuSZL0SVXkGlTTp09nww035JhjjuEnP/kJf/nLXwA48MADue2224DCC6exY8eWr7PLLrvw/PPPA4W1HWbMmAHAe++9x8Ybb8xWW23FokWLuPnmm1d5v7179+bFF19k3LhxQGHR0b/+9a/l+x4xYgRLlixh9uzZ3HPPPat9DIcccgj33Xcfr7/+OgAffvjhGq8x0blzZ+bMmVN+3CNHjmS33XZjs802+9jrlj51Xdlp+Re0pe3feeed8uO88cYbV7qrRbt27ejUqRP33nsvAL/4xS/48pe/DMBhhx3GU089xdSpU4kIbrrppjXaXaOxsS6ty0plbTad2pw1axZTpkxhypQpnHPOOZx55pmNsjkF1mVTqstXX32VI488kmHDhrHnnnuu0eOXJElaWxU5g2rChAlceOGFpJRYsmQJ1113HQCXXHIJJ510Et26daNz584cdNBB5etccMEFHHPMMYwePbq8yCdAt27d+OIXv8inP/1ptt9+e3r37s0TTzyx0vvdcsst+d3vfsfZZ5/N3LlzWbhwIX379qVnz56cdtppjB8/ni5durDzzjt/7C4JnTp14oYbbuCYY45h4cKFLF68mEGDBlFbW/uxj3/jjTfmrrvu4qyzzip/sjlixIg1/fGtlWbNmjFs2DD69evHwoUL6dKlC7fffjtQ+AT3kksu4Q9/+AMA119/PSeddBJDhgyhffv23HHHHQBsvvnmXHPNNRx88MEsXryYAw88kP79+wOFNTaOPPLI8i4Nt956K/fddx89evRokMfTkKxL67JSWZtNpzabEuuy6dTlhRdeyOzZsxk8eHD5Pn/3u9+x6667NsjjkSRJ1Sl93PT2Br3zlFoCcwHmzp272unuKzNgwAAOOOAABgwY0ADptL7MmzePVq1alYatImJezjzWpaDp1SVYm02BdalKVGl1KUmSGqeK3MVPkiRJkiRJ1aNRz6CqBN///ve5++67lzmvTZs2y6ypodWrtE9erUuBddlQrM11Y102DOty3VRaXUqSpMbJBpWyq7QXttalwLpUZbIuVYkqrS4lSVLj5C5+DWzAgAHccsstWe77ueeeY6+99qKuro7a2tryUXuWLFlC7969qauro1u3bhxzzDG8++67QOGoSa1ataKuro66urome9SzaleJdQkwc+ZMjjnmGDp16kTnzp256aabypc9//zz7Lvvvnz605+mc+fO5SN9qenIWZd77LFH+Xlvl112oU2bNuXLUkrly+rq6pgzZw4AkydPpk+fPrRs2ZITTzwxS241jJy1eOmll7LLLruQUuKVV15Z5rInn3ySrl270rFjR44++mjmzp0LwD333EPPnj3p1q0btbW1/OpXvypfZ/HixQwcOJAOHTrQqVMnRo0atV4fjyRJ0pqqyKP4qX6cffbZ/Pd//zdf+MIX+Nvf/saBBx7I22+/TbNmzXjwwQfZfPPNATj33HO57LLL+OEPfwhAXV0dTz75ZM7oasJWVZcAJ510EkcffTQjR44kIvj3v/8NFGZmHHfccfz2t7+lrq6O999/n4ULF+Z8GGpixo0bV/7+4osvZtasWStc3rz5sv8yW7duzeWXX86LL77oc6bqzWGHHcYpp5zCfvvtt8z5S5YsYcCAAfzmN7+hZ8+eDB48mKFDh/K9732Pbbfdlvvvv59tt92WN998k7q6Og444AC22247hg8fzsyZM5k8eTLTpk1jn3324eCDD2azzTbL9AglSZJWrmpmUM2fP5++fftSW1tLt27d+Pa3vw3AQw89xN57702PHj3o0aMHY8aMKV9np5124qKLLmL//fdnl1124bHHHuPss8+mtraW3r17l99UX3rppRx//PEceuih7L777px66qkrffM8e/ZsTjzxRPbcc09qa2v5+c9/vtps66pZs2blmVHvvvsu7du3L19Wak4tWbKEefOciZ+LdflRXU6aNIlXX32VU089FSjMWmnXrh0Av/rVr/jc5z5HXV0dAJtuuilbbLFFveTRiqqxLksighEjRtC/f/+P3fZTn/oUvXv3ZpNNNqnXDPpINdbi3nvvTU1NzQrnjxs3jrZt29KzZ08ATjvtNEaOHAnAnnvuybbbbgvAdtttR7t27XjrrbcAGDlyJN/4xjdIKVFTU8NnP/tZHnjggXrJKkmSVJ+qZgbVmDFjaNu2bXlq++zZswHo1asXTz/9NM2aNSt/svjGG2/QrFmhd9eiRQv+9Kc/8dvf/pYjjjiCBx54gGuuuYZBgwZx88038//+3/8D4Omnn2b8+PG0bt2ao48+mptuuokzzzxzmQyDBw/m2GOP5aijjmLBggX07t2b/fbbj8mTJ6802/JKb86Xd8ghhzB06NAVzr/hhhv44he/yLe//W3mzp3Lww8/vMzlBx54IBMmTKBLly78/ve/L58/YcIEevToQcuWLbn44os5/PDDP+7Hq0/IuvyoLidOnMh2221H//79mTBhAjvvvDNXX301NTU1TJw4EYBDDz2Ut99+m/3224/LLrvMxkADqca6LHnsscfYeOON6d279zLn9+7dm8WLF3P88cczZMiQj/kJqr5Ucy0ub9q0aeywww7lcU1NDdOmTVthu8cff5y5c+fSrVu3tbqeJElSblUzg6p79+6MHTuWwYMH84c//KE8tX3GjBl8+ctfpmvXrhx55JHMmDGDN998s3y9o48+GoAePXqw2Wab0adPn/L4tddeK2931FFH0bZtW5o1a8bJJ5/MH//4xxUy3H///Xz3u9+lrq6Ovffemzlz5vDyyy+vMtvyXnjhhZWeVvUC90c/+hE33ngjU6dO5c477+SEE05g8eLF5cvHjh3LjBkz6NWrF9dffz0APXv2ZNq0aYwfP57rrruOU045ZYU1MFR/rMuP6nLRokU8+eSTnHXWWYwfP57DDjuMk046CYBFixYxduxY7rjjDp577jnmzJnDZZdd9gl+4loT1ViXJcOHDy/XXcm0adN47rnneOihhxg1ahS33377GvwUVR+quRaXFxGklMrjlNIyY4DXXnuN/v37M2LECDbaaKOVXq90XUmSpEpTNTOodt11V8aPH89DDz3EbbfdxlVXXcUjjzzC6aefzte//vXybkVt27ZlwYIF5ettvPHGAGywwQbl70vjRYsWlcdLv9hb2YvB0vkPPvgg22yzzQqXrSzb8tbmU9iZM2cyZswY7rjjDqAw82T27NnMmDGD7bbbbpnHMWDAAL72ta9xwQUXlHf9A6itrWXffffl+eefp0OHDiu9b60b6/KjuqypqaFjx4706tULgBNPPJFzzz0XKHzif8ghh/CpT30KgOOOO47rrrtupferdVdtdVkyf/58Ro0axUsvvbTM+dtvvz0AW221FSeccAJPP/00/fr1W+ltqH5Vay2uTE1NDVOnTi2P33jjjXJtArz55pscfvjhXHvttey7774rXK9r164ATJ06lT322GON71eSJGl9qZoG1fTp02nbti3HHHMM++67L506dQIKa+CUXuDdeeedq5yi/3Huu+8+vve977HFFlswfPhwDjrooBW2OeKII7jiiisYOnRo+eg8n/rUp3jvvfdWmm15L7zwwhrnadOmDUuWLGHcuHHsscce5QWAt9lmG2bOnElKiS233JKI4Le//W35hetbb73FNttsQ0qJ6dOn88wzz/C9731v7X8gWiPW5Ud1WXrz98orr9ChQwfGjBlDbW0tAF/5ylf4yle+wvz582nRosUyl6n+VVtdlowaNYrPfOYzy6z/M3v2bDbddFM22WQT3n//fe69997y7Bw1vGqtxZXZY489eOedd/jrX/9Kz549ufHGG8tH2p05cyaHHnool1xyCUcdddQy1/vqV7/KLbfcwuGHH860adN44oknljlCqiRJUqWomgbVhAkTuPDCC0kpsWTJkvLsix/84AecccYZbL311qtcmHRNHHDAAZxwwglMmTKF3r17M3DgwBW2ufrqqxk8eDC1tbVEBFtttRW/+c1vVpltXWywwQaMGDGi/OnyBhtswK9//WuaNWvGjBkz6NevH4sWLSIi6Nq1K9deey0Av/vd77j++uvZcMMNiQh+9KMf0aVLl3XOo5WzLj+qS4BbbrmF4447jkWLFtGmTRuGDRsGwC677MLpp59Or169aNasGbW1teWjTqr+VVtdlgwfPnyFxdFffvllBg4cSLNmzfjwww854ogjynnffvttevTowfz58/nggw/Yfvvtue6661ZoEOiTq8ZavOiii7j99tv517/+RZ8+fejUqROPPfYYzZo1Y9iwYfTr14+FCxfSpUuX8u6ml112Ga+//jpDhw4tz8r66U9/Sp8+fejfvz9PP/00HTp0YIMNNuDaa69dZra0JElSpUgRke/OU2oJzIXCYeRbtmyZLcu6uPTSS1m0aBH/+7//mztKozRv3jxatWpVGraKiKyHFbQuBdZlQ7Eu1411WX+sxfpTaXUpSZIap6pZJF2SJEmSJEmVyRlUyq7SPnm1LgXWpSqTdalKVGl1KUmSGidnUK2BKVOmLHOknByefPJJunbtSseOHTn66KOZO3fuSrebOHEivXr1YrfdduOggw7irbfeKl/22muv8fnPf57OnTvTqVMnfv/73wPw/e9/n7q6uvKpefPm3HPPPevlcan+NJU6BVi4cCFdu3bls5/97PqIrXrWmGrxtNNOo3379qSUljm6GxQWTe/UqRMdOnRg4MCBLF68GCgcLe2II46ge/fudO3alQceeKDBH4/WXWOqy1U9R/7hD39Y5v9169atGTx4MABjxoyhe/fu1NXV0a1bN37+85+vt8clSZJULyIi2wloCQQQc+fOjUr1+uuvR/v27bPd/+LFi2PXXXeN559/PiIizjnnnLjkkktWuu1+++0Xo0ePjoiIq6++Ovr371++je7du8eDDz4YEREffvhhvP322ytcf9KkSdG6det4//33G+KhrNTcuXOjVAdAy8hYk9GI6nJ5TaFOS77zne9E//79Y999923Y0KthXX5yjakW//SnP8W//vWvAOLDDz8sn//uu+9G+/bt44033oglS5ZE375945e//GVERBx33HFx5ZVXRkTEa6+9Fu3bt19vvxPr8pNrTHX5cc+RpdvbYYcd4plnnomIiPfeey8WLVpU/r6mpiZefvnlhngoK6i0uvTkyZMnT548Nc5T1c2guuSSS7jkkkvK47/85S/sscceAFx++eX06tWLHj16cMABB/Dqq6+ucP3HHntsmVkdt956KyeeeCJQaPZdeuml7LnnntTV1TFw4EA+/PDDdc48btw42rZtS8+ePYHCJ/4jR45cYbsZM2bw8ssvl48gdeqppzJq1CgAHnnkEdq1a8ehhx4KQPPmzdlqq61WuI3hw4dz7LHHsskmm6xzbn1y1VqnAC+++CLPPfccJ5988jpn0rpryrUIsN9++9GuXbsVzh8zZgz77LMPNTU1pJQYOHBg+TYmTJjAIYccAsDOO+/M1ltv7Syq9awp1+XHPUeWjB07lk033ZS99toLgFatWrHBBhsA8P77768wI1CSJKnSVV2Dqn///txxxx1EFNbeGjFiBP369QPglFNO4bnnnmP8+PGceeaZDBkyZK1u+7bbbuO9997jL3/5Cy+88ALNmjXjpptuWmG7cePGLTNFf+nTXXfdtcL206ZNY4cddiiPa2pqmDZt2grbTZ8+ne23356UElB4sbrJJpvwzjvvMHHiRLbYYgv69u1Ljx49GDBgALNmzVrm+hHBiBEjOOmkk9bqcav+VWudLlq0iDPOOIOf/exna/WY1HCaci2uzupuo0ePHvzmN78B4KWXXmLixIlMnTp1rW5f66Yp1+XqniOXNnz48BX+Xz/xxBN069aNmpoahgwZQqdOndbqsUuSJOXUPHeA9a1Dhw5svfXWPPXUU+y9997cfffdjB8/Hih8AvujH/2Id999l8WLF7Nw4cK1uu3777+fv/71rzz66KNA4RPMTTfddIXt9thjD1544YU1vt2IKL9QBUgpLTNe1XZLb79o0SIeffRRxo0bx84778zFF1/Meeedx7Bhw8rbPf744zRv3px99tlnjbOpYVRrnQ4dOpQjjzySDh06MH369DW+bzWcplyLa3MbpdsBuOqqqzj77LOpq6ujU6dO9O7dm+bNq+7faVZNuS5X9xxZMm/ePEaPHs3f/va3Zbbp06cPEyZM4K233uIrX/kKhx9+uE0qSZLUaFTlK+p+/fpx++238+6779KjRw+23nprPvjgA0444QSeeeYZdt99d1566SW+8IUvrHDd5s2bs2TJkvJ4wYIF5e8jgh/84Ad87WtfW+39jxs3jm984xsrveyiiy7iuOOOW+a8mpqaZT6df+ONN1a60OsOO+zAtGnTyi9u586dy4IFC2jbti01NTXsvffe7LzzzgB8/etf59hjj13m+iv7NFb5VGOdPvXUU7z00ktcf/31LFiwgDlz5nDAAQfw2GOPrTarGlZTrcXVqamp4dlnny2Pp06dWr6Nrbfeml//+tfly7p27Urnzp3X6va17ppqXa7uObLk7rvvplevXsvMyFratttuyz777MN9991ng0qSJDUeORfAItPiqu+88060a9cu+vbtG3feeWdERMyZMydatmwZs2bNioiIQYMGlRdTXXph1enTp8dWW20V7733XixcuDAOOeSQ+PrXvx4REcOGDYs+ffqUH8usWbPi1VdfXee8ixcvjl122WWZhVW/+93vrnTbPn36LLOwar9+/SIi4j//+U907NixvDD6lVdeGccff3z5evPnz4/WrVvHlClT1jnv2qq0xVVz1eXyqrFOlzZ27FgXSa+QumzKtVjCShZJ32677ZZZJP0Xv/hFRETMnDmzvBj1iBEjokuXLrF48eJ1zr0mrMuPNOW6/LjnyIMPPjiGDx++zHmTJk0q1+Hs2bOjtrY2HnjggXXOvSYqrS49efLkyZMnT43zVHVrUAG0bduW3r178+ijj5YXId1iiy24+OKL6dmzJ/vvvz/bbLPNSq/bvn17Tj/9dOrq6vjCF75Ax44dy5cNGDCAww47jL333pva2lo+97nPrfW6JyvTrFkzhg0bRr9+/ejYsSOvv/56eU2NcePGLfPp8PXXX8///M//sNtuuzF69Gh+/OMfA7DZZptxxRVXcNBBB9G9e3f++Mc/ctVVV5WvN3r0aOrq6thxxx3XOa/qRzXWqSpTU67Ffv36lWex7LTTTuV1jDbffHOuueYaDj74YDp06EDbtm3p378/AH/+85/Zfffd2W233fjlL3/J6NGjadasKv+dZtWU63J1z5H/93//x7PPPsvRRx+9zO3fe++9dOvWje7du7Pffvtx8sknc9hhh61zbkmSpPUlRUS+O0+pJTAXYO7cubRs2TJbFuUzb948WrVqVRq2ioh5OfNYlwLrUpXJulQlqrS6lCRJjZMf+UqSJEmSJCkrG1SSJEmSJEnKygaVJEmSJEmSsmqeO0DJvHkuV1CtKvl3X8nZ1LAq+XdfydnUsCr5d1/J2dSw/N1LkqT6UDGLpEtF2RdXtS61EtalKpF1qUqUvS4lSVLj5C5+kiRJkiRJyir3DKoEtMgWQJVofuQsSqxLrZR1qUpkXaoSZa9LSZLUOGVtUEmSJEmSJEnu4idJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSsbFBJkiRJkiQpKxtUkiRJkiRJysoGlSRJkiRJkrKyQSVJkiRJkqSs/j+4GARqhYPfRgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1500x1200 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=(10,8), dpi=150)\n",
    "plot_tree(dt, feature_names=X.columns);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c24c802f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
